[{"id":"18c39e99fd033dd5083bccdf6728bd02","title":"2. Gradle을 스프링 부트 프로젝트로 변경","content":"이번 포스트에서는 작성한 프로젝트를 스프링 부트 프로젝트로 변경하는 방법을 설명합니다.의존성 주입을 통해 gradle을 스프링 부트 프로젝트로 변경하도록 하겠습니다.\nGradle을 스프링 부트 프로젝트로 변경2-1 “build.gradle”의 프로젝트의 플러그인 의존성 관리를 위한 설정 코드를 작성우선 프로젝트 내에 위치한 build.gradle의 최상단에 의존성 관리를 위한 설정코드를 작성합니다.코드를 작성하기 전에, 이 포스트에서는 책의 내용과 다른 방식으로 설정 코드를 작성 것을 미리 알려둡니다.그럼 어떻게 다른지 살펴볼까요? 우선, 책에서는 아래와 같이 코드를 작성하고 있습니다.\nbuildscript &#123;\n    ext &#123;\n        springBootVersion &#x3D; &#39;2.1.9.RELEASE&#39;\n    &#125;\n    repositories &#123;\n        mavenCentral()\n        jcenter()\n    &#125;\n    dependencies &#123;\n        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)\n    &#125;\n&#125;\n\napply plugin: &#39;java&#39;\napply plugin: &#39;eclipse&#39;\napply plugin: &#39;org.springframework.boot&#39;\napply plugin: &#39;io.spring.dependency-management&#39;\n\n위와 같이 작성하던 도중, gradle.build에 자동으로 생성되어있던 plugins &#123; id &quot;java&quot;&#125;가 눈에 들어왔습니다.\n[그림2-1] 신경쓰이는 존재, plugins { id “java”}\n위에서 작성한 코드에서 apply plugin과 닮은 모습에 혹시 apply plugin을 모아서 사용할 수 있는 건 아닐까 하는 의심이 들었고, 자세한 사항을 알기 위해 검색하게 되었습니다. 검색해보니 plugins &#123;&#125; 은 gradle이 업데이트 되면서 변경된 사항으로 “plugins block”라 불리며, 플러그인을 추가하고, 선택적인 매개변수를 사용하여 적용 시기를 제어할 수 있다는 특징을 지닌다고 합니다.(출처)\n이 업데이트로 위의 코드의 buildscript&#123;&#125;과 apply plugins는 아래와 같이  합쳐서 적는 것이 가능해졌습니다.\nplugins &#123;\n    id &quot;java&quot;\n    id &quot;eclipse&quot;\n    id &quot;org.springframework.boot&quot; version &quot;2.1.9.RELEASE&quot;\n    id &quot;io.spring.dependency-management&quot; version &quot;1.0.11.RELEASE&quot;\n&#125;\n\n\n\n\n\n\n\n\n\n플러그인 정보는 이곳에서 확인 가능합니다.\n훨씬 간편하고 보기 좋아졌습니다.이 4개의 플러그인은 자바와 스프링 부트를 사용하기 위해 반드시 추가해야함을 잊지 말아주세요!그럼, gradle을 마저 추가해봅시다.\n2-2 dependencies에 개발에 필요한 의존성들을 선언dependencies에 개발에 필요한 의존성들을 선언합니다.책에서는 compile을 사용하였으나, 여기서는 implementation을 사용합니다.implementation을 사용하는 이유가 몇 가지 있습니다만, 가장 큰 이유는 compile이 gradle7+ 버전에서 삭제되었다는 것입니다.그 외에도 이유는 많지만, 이 포스트는 프로젝트 생성을 위한 자리이니 자세한건 다음에 다루어보겠습니다.혹시, 이 사항에 관심있으신 분을 위해 아래의 포스트 주소를 남기니 확인해보시길 바랍니다.\n\n\n\n\n\n\n\n\n\nGradle implementation vs. compile dependencies\n그럼, build.gradle의 dependencies에 다음의 의존성을 추가해봅시다.\ndependencies &#123;\n    implementation group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-web&#39;, version: &#39;2.4.5&#39;\n    testImplementation group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-test&#39;, version: &#39;2.4.5&#39;\n&#125;\n\n2-3 자바의 버전을 1.8로 설정해줍니다.이제 자바 소스 코드의 버전을 1.8로 설정해보겠습니다. 참고로, 제 컴퓨터에 설치되어있는 JDK는 13입니다.그럼에도 불구하고 1.8로 설정하는 이유는 책과의 환경 차이에서 생기는 오류를 줄이기 위함입니다.책에서는 스프링 부트 2.1.9.RELEASE 버전을 사용하며 gradle은 4.8~4.10 버전을 사용하고 있습니다.JDK 13은 스프링 부트 2.2.x 버전 이상, gradle은 6버전 이상만이 지원하기 때문에 스프링 부트의 버전업이 불가피합니다.스프링 부트의 버전업으로 인해 어떤 오류가 생길지 모르니 초반에는 JDK 1.8로 프로젝트를 진행하고, 후에 기회가 된다면 스프링 부트 업그레이드 후 13으로 변경하여 작업해보도록 하겠습니다.그럼, version아래에 다음과 같은 코드를 추가해주세요.\nsourceCompatibility &#x3D; 1.8\n이 코드는 자바 소스 코드의 버전을 의미합니다.\n2-4 build.gradle작성이 완료된 build.gradle의 전체 코드는 아래와 같습니다.\nplugins &#123;\n    id &quot;java&quot;\n    id &quot;eclipse&quot;\n    id &quot;org.springframework.boot&quot; version &quot;2.1.9.RELEASE&quot;\n    id &quot;io.spring.dependency-management&quot; version &quot;1.0.11.RELEASE&quot;\n&#125;\n\ngroup &#39;com.dev.latte&#39;\nversion &#39;1.0-SNAPSHOT&#39;\nsourceCompatibility &#x3D; 1.8\n\nrepositories &#123;\n    mavenCentral()\n&#125;\n\ndependencies &#123;\n    implementation group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-web&#39;, version: &#39;2.4.5&#39;\n    testImplementation group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-test&#39;, version: &#39;2.4.5&#39;\n&#125;\n\ntest &#123;\n    useJUnitPlatform()\n&#125;\n\n2-5 Gradle 반영하기그레이들 작성이 완료되었다면, 인텔리제이 상단에 있는 Reload 버튼(순환마크)을 클릭하여 그레이들을 반영합니다.\n[그림2-2] gradle import\n버튼을 클릭하면, 인텔리제이 하단에 그레이들의 반영 상황이 표시되고, 반영이 끝나면 Gradle sync finished가 표시됩니다.\n이제 스프링 부트 프로젝트의 기본 셋팅이 완료되었습니다!  \n다음 포스트에서는 프로젝트의 설정이 제대로 되었는지 확인해보도록 하겠습니다.\n","slug":"springboot-web-3","date":"2021-06-10T00:46:49.000Z","categories_index":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","tags_index":"Java,gradle,springBoot","author_index":"Latte"},{"id":"681e8e55f24e67b1822965c116da3835","title":"0. 개요","content":"이 카테고리는 이동욱님의 저서 「스프링 부트와 AWS로 혼자 구현하는 웹 서비스」를 기반으로 혼자 연습하며 문제를 해결해가는 카테고리입니다.기본적으로 책을 따라 진행하며, 프로젝트 전반의 흐름 및 진행하면서 생기는 버그의 해결문제를 기록합니다.또한 이 포스트에서 진행하는 프로젝트 환경은 책과 다른 점이 존재하니, 이런 부분을 확인하면서 포스트를 봐주시기 바랍니다.  \n\n\n\n\n\n\n환경\n    - 블로그 : intelliJ IDEA / Java8(JDK 1.8) / Gradle 6.8    - 책 : intelliJ IDEA / Java8(JDK1.8) / Gradle 4.8 ~ Gradle 4.10.2\n\n개인적으로 상냥하게 설명된 책이니 구매하셔서 보시는 것도 추천드립니다. (책 이름에 yes24 링크가 걸려있습니다)\n또한 기본적인 버그는 이동욱님의 공식 깃허브에서 논의되고 있으니 이쪽도 확인해보세요.  \n궁극적인 목표는 “서비스를 처음부터 끝까지 혼자 만드는 것!” 이지만 공부를 하기 위함도 있습니다.때문에 프로그램이나 프레임워크가 왜 그렇게 동작하는지를 알기 위해 삼천포로 빠지는 경우가 많을 것 같습니다.글이 길어질 것 같은 경우, 다른 게시글에 정리할 예정이니 관심있으신 분은 링크를 타고 이동해주세요.\n그럼, 시작하겠습니다 :D\n","slug":"springboot-web-1","date":"2021-06-08T12:36:23.000Z","categories_index":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","tags_index":"Java,gradle,springBoot","author_index":"Latte"},{"id":"3b9e4a33c5246d01da88767642ae37d5","title":"markdown page","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-06-07T12:36:23.000Z","categories_index":"","tags_index":"hexo,aurora","author_index":"Latte"},{"id":"a01df8c8fb60fb63504058a17ab9f187","title":"1. IntelliJ 프로젝트 생성","content":"이 포스트에서 IntelliJ의 설치는 다루고 있지 않습니다. IntelliJ의 설치는 다른 분의 블로그나 웹을 참고해주세요.  \n\n\n\n\n\n\nIntelliJ IDEA\n    - IntelliJ는 기본적으로 유료툴이지만 community버전은 무료로 이용 가능합니다.    - 학생이시라면 1년 간 Ultimate버전 제품을 무료로 사용 가능합니다.\n\nIntelliJ 프로젝트 생성프로젝트 생성 전에, 이 포스트에서는 프로젝트 생성시 Spring Initializer를 사용하지 않습니다.왜 이 방식을 사용하는지 설명하겠습니다.  일단, 스프링 프로젝트를 생성하는 방법은 두 가지가 있습니다.  \n\nSpring Initializer를 이용하는 방법  \n프로젝트 생성 후, 의존성을 추가하는 방법\n\n첫 번째 방법은 간단하지만, 의존성 주입이나 build.gradle 등을 이해하지 않은 상태로 사용할 경우 오히려 혼란스러울 수 있습니다.때문에 이 포스트는 Spring Initializer를 사용하지 않고 간단한 프로젝트를 생성 후, 필요할 때마다 의존성을 추가합니다.\n이제 프로젝트를 생성해봅시다. \n1-1 프로젝트 생성“Create new Project” 혹은 “New Project” 버튼을 클릭합니다.\n[그림1-1] 프로젝트 생성\n1-2 프로젝트 Gradle 설정아래와 같은 창이 뜨면 이하와 같이 설정합니다.  \n[그림1-2] 프로젝트 Gradle 셋팅(JDK 버전은 신경쓰지 않으셔도 괜찮습니다. 나중에 build.gradle에서 1.8로 제어할 예정입니다.)\n설정이 끝났다면, Next를 클릭하여 다음으로 이동해주세요.\n1-3 GroupId와 ArtifactId 등록GroupId와 ArtifactId를 등록합니다.\n[그림1-3] 프로젝트 GroupId &amp; ArtifactId 등록  \n여기서 ArtifactId는 프로젝트의 이름이 됩니다.\n1-4 finish를 클릭하면 프로젝트 빌드가 시작됩니다.\n\n\n\n\n\n\n\n\n위의 과정 중간에 프로젝트의 경로를 정하는 창이 뜰 수도 있습니다. 당황하지 마시고 프로젝트가 저장될 위치를 저장해주세요.\n이제 Gradle기반의 자바 프로젝트가 완성되었습니다!\n다음 포스트에서는 이 프로젝트를 스프링 프로젝트로 변경해보도록 하겠습니다.\n","slug":"springboot-web-2","date":"2021-06-09T12:36:23.000Z","categories_index":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","tags_index":"Java,gradle,springBoot","author_index":"Latte"}]