{"title":"2. 선형구조 - 스택(Stack)과 큐(Queue)","uid":"02ccdc68ca28ee335d8d90d6267099db","slug":"cs-stack-and-queue","date":"2021-06-27T07:30:37.000Z","updated":"2021-07-11T07:30:54.609Z","comments":true,"path":"api/articles/cs-stack-and-queue.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/computer_science.jpeg","content":"<p>오늘은 이전 포스트(<a href=\"https://dev-latte.github.io/post/cs-data-structure\">자료구조</a>)에 이어서 선형 구조 중 하나인 스택(Stack)과 큐(Queue)를 정리해보도록 하겠습니다.</p>\n<h3 id=\"선형구조-스택-Stack-과-큐-Queue\"><a href=\"#선형구조-스택-Stack-과-큐-Queue\" class=\"headerlink\" title=\"선형구조 - 스택(Stack)과 큐(Queue)\"></a>선형구조 - 스택(Stack)과 큐(Queue)</h3><p>선형구조(Linear Structure)란 자료를 구성하는 <strong>데이터를 순차적으로 나열시킨 형태</strong>를 의미합니다.<br>대부분의 선형구조가 아래와 같은 형태를 띄고 있고, 1:1의 데이터 관계를 갖는다는 특징이 있습니다.</p>\n<p>[그림1] 선형구조<br><img src=\"./cs-stack-and-queue/Linear_Structure.png\" alt=\"Linear Structure\"></p>\n<p>오늘 설명할 스택과 큐도 위의 형태를 기본으로 합니다.</p>\n<h4 id=\"2-1-스택-Stack\"><a href=\"#2-1-스택-Stack\" class=\"headerlink\" title=\"2-1 스택(Stack)\"></a>2-1 스택(Stack)</h4><p>스택(Stack)은 접근이 <strong>목록의 끝</strong>에서만 일어나는 나열 구조입니다. 때문에 끝먼저내기 목록(Pushdown list)이라고도 부릅니다. <a href=\"https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D\">(위키피디아 - 스택)</a></p>\n<p>위에 있는 [그림1]을 스택으로 표현해보도록 하겠습니다.</p>\n<p>[그림2] 스택(Stack)<br><img src=\"./cs-stack-and-queue/stack.png\" alt=\"Linear Structure\"></p>\n<p>스택은 입구와 출구가 동일합니다. 때문에 자료를 넣는 곳과 자료를 꺼내는 곳이 한 군 데 밖에 없습니다.  </p>\n<p>자료를 넣는 것은 푸쉬(push), 자료를 꺼내는 것을 팝(pop)이라고 합니다. 스택의 가장 큰 특징은 데이터를 사용하기 위해 자료를 요청하면, 마지막에 들어간 데이터가 제일 먼저 나온다는 것입니다. 이런 구조를 후입선출(LIFO;Last Input First Out)이라고 합니다. </p>\n<p>[그림2]를 예로 들어봅시다. 당신은 스택에 담긴 Data-3을 Data-5로 대체하고싶습니다. 목표는 스택의 데이터가 [Data-1, Data-2, Data-5, Data-4]가 되는 것입니다. 그러기 위해서는 어떻게 해야할까요?<br>스택에서는 아래와 같은 흐름을 거칩니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>Data-4를 꺼낸다.</li>\n<li>Data-3을 꺼낸다</li>\n<li>Data-5를 넣는다</li>\n<li>다시 데이터 4를 넣는다.</li>\n</ol></blockquote>\n<p>그리고 이것을 자바로 표현하면 다음과 같습니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 스택 선언</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Stack에 데이터 4개 추가</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data-\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Data-4 꺼내기</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Data-3 꺼내기</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data-5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Data-5 넣기</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data-4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Data-4 넣기</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>결과는 다음과 같습니다.</p>\n<p>[그림3] 코드 실행 결과<br><img src=\"./cs-stack-and-queue/java_stack.png\" alt=\"result run\"></p>\n<h4 id=\"2-2-큐-Queue\"><a href=\"#2-2-큐-Queue\" class=\"headerlink\" title=\"2-2 큐(Queue)\"></a>2-2 큐(Queue)</h4><p>큐(Queue)는 <strong>먼저 집어 넣은 데이터가 먼저 나오는 선입선출(FIFO; First Input FIrst Out) 구조로 저장하는 형태</strong>를 말합니다. 큐는 한쪽 끝(Rear)에서는 삽입 연산(Enqueue)만, 다른 끝에(Front)서는 삭제 연산(Dequeue)만 이루어지며 순서가 존재합니다.</p>\n<p>위에 있는 [그림1]을 큐로 표현해보도록 하겠습니다.</p>\n<p>[그림4] 큐(Queue)<br><img src=\"./cs-stack-and-queue/queue.png\" alt=\"queue\"></p>\n<p>이번엔 [그림4]를 기준으로 Data-3을 Data-5로 대체해봅시다. 목표는 큐의 데이터가 [Data-1, Data-2, Data-5, Data-4]가 되는 것입니다. 큐에서는 아래와 같은 흐름을 거칩니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>Data-1을 꺼낸다 (Dequeue)</li>\n<li>Data-2를 꺼낸다 (Dequeue)</li>\n<li>Data-3을 꺼낸다 (Dequeue)</li>\n<li>Data-4를 꺼낸다 (Dequeue) - 이 시점에 큐가 비어있음</li>\n<li>Data-1을 넣는다 (Enqueue)</li>\n<li>Data-2를 넣는다 (Enqueue)</li>\n<li>Data-5를 넣는다 (Enqueue)</li>\n<li>Data-4를 넣는다 (Enqueue)</li>\n</ol></blockquote>\n<p>그리고 이것을 자바로 표현하면 다음과 같습니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 큐 선언, LinkedList를 이용해서 선언한다.</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data-\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> data_1 <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 맨 앞의 데이터 꺼내기(Data-1)</span>\n        <span class=\"token class-name\">String</span> data_2 <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 맨 앞의 데이터 꺼내기(Data-2)</span>\n        <span class=\"token class-name\">String</span> data_3 <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 맨 앞의 데이터 꺼내기(Data-3)</span>\n        <span class=\"token class-name\">String</span> data_4 <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 맨 앞의 데이터 꺼내기(Data-4)</span>\n\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 해당 큐의 맨 뒤에 전달된 요소를 삽입함.</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>data_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 해당 큐의 맨 뒤에 전달된 요소를 삽입함.</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data-5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>data_4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>[그림5] 코드 실행 결과<br><img src=\"./cs-stack-and-queue/java_queue.png\" alt=\"queue\"></p>\n<p>코드를 보면 원하는 위치에 값을 넣기 위해서 큐의 값을 비우고 다시 채워주는 것을 볼 수 있습니다. 이는 큐가 원하는 위치에 값을 끼워넣는 것이 불가능 하기 때문입니다. 특정 인덱스에 있는 데이터를 처리하기 위해서는 <strong>ArrayList</strong> 를 이용해야합니다.</p>\n<h4 id=\"2-3-오버플로우-Overflow-와-언더플로우-Underflow\"><a href=\"#2-3-오버플로우-Overflow-와-언더플로우-Underflow\" class=\"headerlink\" title=\"2-3 오버플로우(Overflow)와 언더플로우(Underflow)\"></a>2-3 오버플로우(Overflow)와 언더플로우(Underflow)</h4><p>마지막으로 스택과 큐는 오버플로우(Overflow)와 언더플로우(Underflow)에 주의해야합니다. </p>\n<p><strong>오버플로우(Overflow)</strong> 란 스택/큐에 데이터가 꽉 찬 상태에서 데이터를 더 집어넣으려고 할 때에 발생하는 현상입니다. 공간이 없는데 무언가를 넣으려고 하면 당연히 넘치는데 그런 현상과 유사합니다.</p>\n<p><strong>언더플로우(Underflow)</strong> 란 오버플로우와 반대되는 개념으로 데이터가 아무 것도 들어있지 않은 상태에서 데이터를 요청할때 발생하는 현상입니다. 텅 비어버린 상자에서 무언가를 꺼내려고하면 아무 것도 얻을 수 없는데 그럼에도 불구하고 무언가를 달라고 요청하니 발생하는 것입니다.</p>\n<p>이 두 가지의 취약점을 이용하여 공격하는 사이버 공격도 존재하니 오버플로우와 언더플로우를 회피할 수 있는 방법, 혹은 발생했을 경우의 대책을 마련해두는 것이 좋습니다.</p>\n<hr>\n<p>이번 포스트에서는 선형구조 중 하나인 스택과 큐를 정리했습니다.<br>다음 포스트에서는 비선형구조 중 하나인 그래프에 대해 정리하도록 하겠습니다.</p>\n","feature":true,"text":"오늘은 이전 포스트(자료구조)에 이어서 선형 구조 중 하나인 스택(Stack)과 큐(Queue)를 정리해보도록 하겠습니다. 선형구조 - 스택(Stack)과 큐(Queue)선형구조(Linear Structure)란 자료를 구성하는 데이터를 순차적으로 나...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Computer Science","slug":"Computer-Science","count":3,"path":"api/categories/Computer-Science.json"}],"tags":[{"name":"Linear Structure","slug":"Linear-Structure","count":1,"path":"api/tags/Linear-Structure.json"},{"name":"Stack","slug":"Stack","count":1,"path":"api/tags/Stack.json"},{"name":"Queue","slug":"Queue","count":1,"path":"api/tags/Queue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EC%84%A0%ED%98%95%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D-Stack-%EA%B3%BC-%ED%81%90-Queue\"><span class=\"toc-text\">선형구조 - 스택(Stack)과 큐(Queue)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%EC%8A%A4%ED%83%9D-Stack\"><span class=\"toc-text\">2-1 스택(Stack)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%ED%81%90-Queue\"><span class=\"toc-text\">2-2 큐(Queue)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%EC%98%A4%EB%B2%84%ED%94%8C%EB%A1%9C%EC%9A%B0-Overflow-%EC%99%80-%EC%96%B8%EB%8D%94%ED%94%8C%EB%A1%9C%EC%9A%B0-Underflow\"><span class=\"toc-text\">2-3 오버플로우(Overflow)와 언더플로우(Underflow)</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{"title":"7. 프로젝트에 Spring Data JPA 적용하기","uid":"6f509e2dbed1e4f5397d3d96a9fdd4cd","slug":"springboot-web-8","date":"2021-07-03T09:59:14.000Z","updated":"2021-07-05T04:39:20.859Z","comments":true,"path":"api/articles/springboot-web-8.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"지난 포스트에서는 JPA가 무엇이고, 왜 사용하는 것인지에 대해 알아보았습니다.이번 포스트에서는 프로젝트에 Spring Data JPA 를 적용해보도록하겠습니다. 프로젝트에 Spring Data JPA 적용하기7-1 Spring Data JPA 의존성...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":10,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":10,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JPA","slug":"JPA","count":3,"path":"api/tags/JPA.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true},"next_post":{"title":"No.2588 곱셈","uid":"a95016e8299093bc301492ede983aea1","slug":"baekjoon-No-2588","date":"2021-06-27T05:22:22.000Z","updated":"2021-06-27T05:37:05.035Z","comments":true,"path":"api/articles/baekjoon-No-2588.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/algorithm_test.jpeg","text":"이 포스트는 백준 알고리즘 사이트의 2588번 문제 곱셈을 정리한 페이지입니다. No.2588 곱셈문제 링크 - https://www.acmicpc.net/problem/2588 문제(세 자리 수) × (세 자리 수)는 다음과 같은 과정을 통하여 이루...","link":"","photos":[],"count_time":{"symbolsCount":802,"symbolsTime":"1 mins."},"categories":[{"name":"코딩 테스트","slug":"코딩-테스트","count":1,"path":"api/categories/코딩-테스트.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":5,"path":"api/tags/algorithm.json"},{"name":"BaekJoon","slug":"BaekJoon","count":1,"path":"api/tags/BaekJoon.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}