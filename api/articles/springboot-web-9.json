{"title":"8. 등록, 수정, 조회 API 만들기","uid":"46bc520d99f0fdb2597458e927fef029","slug":"springboot-web-9","date":"2021-07-05T07:00:07.000Z","updated":"2021-07-05T14:01:27.537Z","comments":true,"path":"api/articles/springboot-web-9.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<h3 id=\"등록-수정-조회-API-만들기\"><a href=\"#등록-수정-조회-API-만들기\" class=\"headerlink\" title=\"등록, 수정, 조회 API 만들기\"></a>등록, 수정, 조회 API 만들기</h3><p>API를 만들기 위해서는 총 3개의 클래스가 필요합니다.</p>\n<ul>\n<li>Request 데이터를 받을 DTO</li>\n<li>API 요청을 받을 Controller</li>\n<li>트랜잭션, 도메인 기능 간의 순서를 보장하는 Service</li>\n</ul>\n<p>여기서 Service는 트랜잭션, 도메인 간 순서 보장의 역할만 할 뿐 비지니스 로직을 처리하지 않으며 스프링에서 비지니스 로직의 처리는 domain에서 처리합니다.</p>\n<p>API를 만들기에 앞서, 이들을 어디에 어떻게 생성할 것인지, 왜 그곳이어야 하는지 이해하기 위해 Spring의 웹 계층에 대해 이해하고 지나갑시다.</p>\n<p>[그림8-1] Spring Web Layer<br><img src=\"./springboot-web-9/1-spring_web_layer.png\" alt=\"Spring Web Layer\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><strong>Web Layer</strong><br>: 컨트롤러(<code>@Controller</code>)와 JSP/Freemaker 등 <strong>뷰 템플릿 영역</strong>입니다.<br>: 이외에도 필터(<code>@Filter</code>), 인터셉터, 컨트롤러 어드바이스(<code>@ControllerAdvice</code>) 등 <strong>외부 요청과 응답에 대한 전반적인 영역</strong>을 이야기합니다.</li>\n<li><strong>Service Layer</strong><br>: <code>@Service</code>에 사용되는 서비스 영역입니다.<br>: 일반적으로 Controller와 Dao의 중간 영역에서 사용됩니다.<br>: <code>@Transactional</code>이 사용되어야 하는 영역이기도 합니다.</li>\n<li><strong>Repository Layer</strong><br>: Database와 같은 <strong>데이터 저장소</strong>에 접근하는 영역입니다.<br>: DAO(Data Access Object) 영역으로 이해하면 쉽습니다.  </li>\n<li><strong>Dtos</strong><br>: <strong>Dto(Data Transfer Object)의 영역</strong>을 의미합니다.<br>: 예를 들어, 뷰 템플릿 엔진에서 사용될 객체나 Repository Layer에서 넘겨준 객체 등이 이것입니다.  </li>\n<li><strong>Domain Model</strong><br>: 도메인이라 불리는 <strong>개발 대상을 모든사람이 동일한 관점에서 이해할 수 있고 공유할 수 있도록 단순화 시킨 것</strong>을 말합니다.<br>: <code>@Entity</code>가 사용된 영역 역시 도메인 모델이지만, 도메인 모델이 <strong>무조건 데이터베이스의 테이블과 관계가 있는 것은 아닙니다</strong>.<br>: VO처럼 값 객체들도 이 영역에 해당합니다.  </li>\n</ul></blockquote>\n<p>간단히 이해하셨다면, 이제 등록 기능을 추가해보겠습니다.</p>\n<h4 id=\"8-1-등록-기능-추가\"><a href=\"#8-1-등록-기능-추가\" class=\"headerlink\" title=\"8-1 등록 기능 추가\"></a>8-1 등록 기능 추가</h4><p>먼저 등록 기능을 추가해봅시다.  </p>\n<p><code>PostsApiController</code>를 web 패키지에,<br><code>PostsSaveRequestDto</code>를 web.dto 패지키에,<br><code>PostsService</code>를 service.posts 패키지에 생성합니다.</p>\n<p>[그림8-2] 클래스 생성 경로<br><img src=\"./springboot-web-9/2-class_path.png\" alt=\"PostsApiController, PostsSaveRequestDto, PostsService path\"></p>\n<p><code>PostsApiController</code>를 추가했다면 등록 메소드를 추가합니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiredArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsApiController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PostsService</span> postsService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1/posts\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">PostsSaveRequestDto</span> requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> postsService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>PostsService</code> 클래스에도 등록 메서드를 추가해줍니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiredArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Transactional</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PostsRepository</span> postsRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PostsSaveRequestDto</span> requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>스프링을 어느정도 써보셨던 분이라면 Controller와 Service에 @Autowired가 없는 것이 어색하게 느껴질 것입니다.   스프링에서 Bean을 주입받는 방식은 3가지입니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><strong>필드주입(Field Injection)</strong><br>: <code>@Autowired</code> 어노테이션을 붙여주는 방식의 의존성 주입. final 선언이 불가능하다.</li>\n<li><strong>수정자 주입(Setter Injection)</strong><br>: <code>수정자(Setter)</code>를 이용한 주입방법</li>\n<li><strong>생성자 주입(Constructure Injection)</strong><br>: <code>생성자로 객체를 생성하는 시점</code>에 필요한 빈을 주입하는 방식.</li>\n</ul>\n<p>가장 권장하는 방식은 생성자로 주입받는 방식입니다. (이에 대해서는 기회가 되면 정리해보도록 하곘습니다)</p></blockquote>\n<p>여기서는 롬복 어노테이션인 <code>@RequiredArgsConstructor</code>를 이용하여 생성자를 주입받고 있습니다.<br>생성자를 직접 안 쓰고 롬복 어노테이션을 사용하는 이유는 해당 클래스의 의존성 관계가 변경될 때마다 생성자 코드를 계속해서 수정해야하는 문제를 해결하기 위해서입니다.</p>\n<p>계속해서 <code>PostsSaveRequestDto</code>의 코드를 작성하도록 하겠습니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsSaveRequestDto</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PostsSaveRequestDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Posts</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Posts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Dto는 Entity 클래스와 거의 유사한 형태임에도 추가로 생성하였습니다.<br>절대로 <strong>Entity 클래스는 Request나 Response클래스로 사용해서는 안 되기 때문</strong>입니다.</p>\n<p>Entity는 데이터베이스에 직접적으로 영향을 미치는 핵심 클래스입니다. Entity 클래스를 기준으로 테이블이 생성되고, 스키마가 변경됩니다. Entity 클래스가 변경되면 여러 클래스에 영향을 미치게 됩니다.</p>\n<p>그리고 Request와 Response 용 Dto는 View를 위한 클래스이기에 정말 <strong>자주 변경, 수정</strong>됩니다.</p>\n<p>이런 이유로 View Layer와 DB Layer의 역할 분리는 철저해야합니다. 실제로 Controller에서 결괏값으로 여러 테이블을 조인해서 줘야하는 경우가 빈번하므로 Entity 클래스만으로 표현하기 어려운 경우가 많습니다. 제가 다니던 회사는 이 문제때문에  전체적으로 리팩토링을 진행한 적이 있습니다. View를 위한 DTO가 따로 존재하지 않아 DB에 과하게 접근, DB 성능에까지 영향을 미쳤기 때문입니다.</p>\n<p>그러므로 이런 문제가 생기기 전에 미리 <strong>Entity 클래스와 Controller에서 쓸 Dto는 분리해서 사용하도록 합시다.</strong></p>\n<p>이제, 등록 기능의 코드가 완성되었으니 데스트 코드로 검증하도록 하겠습니다.<br>테스트 클래스의 이름은 <code>PostsApiControllerTest</code>이며 위치는 아래의 그림과 같습니다</p>\n<p>[그림8-3] 테스트 클래스 경로<br><img src=\"./springboot-web-9/3-test_class_path.png\" alt=\"PostsApiControllerTest path\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterEach</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExtendWith</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalServerPort</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>assertj<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>assertThat<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span>RANDOM_PORT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsApiControllerTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@LocalServerPort</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestRestTemplate</span> testRestTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PostsRepository</span> postsRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@AfterEach</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Posts_</span>등록된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">String</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PostsSaveRequestDto</span> requestDto <span class=\"token operator\">=</span> <span class=\"token class-name\">PostsSaveRequestDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:\"</span> <span class=\"token operator\">+</span> port <span class=\"token operator\">+</span> <span class=\"token string\">\"/api/v1/posts\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//when</span>\n        <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> responseEntity <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">postForEntity</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> requestDto<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>responseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>responseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">></span></span> all <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ApiController를 테스트하는데에 HelloController와 달리 @WebMvcTest를 사용하지 않습니다.<br><code>@WebMvcTest</code>의 경우 JPA 기능이 작동하지 않기 때문입니다. 때문에 지금같이 JPA 기능까지 한 번에 테스트할 때에는 <code>@SpringbBootTest</code>와 <code>TestRestTemplate</code>를 사용해야합니다.<br>테스트를 수행하면 다음과 같이 성공할 것입니다</p>\n<p>[그림8-4] 등록 기능 테스트 결과<br><img src=\"./springboot-web-9/4-test_save_result.png\" alt=\"test result\"></p>\n<p>WebEnvironment.RANDOM_PORT로 인해 <strong>랜덤 포트</strong> 실행과 <strong>insert 쿼리</strong>가 실행된 것을 보실 수 있습니다.</p>\n<p>이제 등록 기능을 완성했으니 수정 및 조회 기능도 추가해보도록 하겠습니다.</p>\n<h4 id=\"8-2-수정-기능-추가\"><a href=\"#8-2-수정-기능-추가\" class=\"headerlink\" title=\"8-2 수정 기능 추가\"></a>8-2 수정 기능 추가</h4><p>수정 기능의 리퀘스트 데이터를 처리해줄 <code>PostsUpdateRequestDto</code>를 추가, 코드를 작성합니다.<br>경로는 다음과 같습니다.</p>\n<p>[그림8-5] PostsUpdateRequestDto &amp;  PostsResponseDto경로<br><img src=\"./springboot-web-9/5-PostsUpdateRequestDto_path.png\" alt=\"PostsUpdateRequestDto path\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsUpdateRequestDto</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PostsUpdateRequestDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>작성이 완료되었다면 <code>Posts</code>에 도메인 수정을 위한 update 메서드를 추가해줍니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>PostsResponseDto</code>도 추가해줍니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsResponseDto</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PostsResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Posts</span> entity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>PostsService</code>에 수정 기능 메서드를 추가합니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PostsUpdateRequestDto</span> requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Posts</span> posts <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"해당 게시글이 없습니다. id = \"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    posts<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">PostsResponseDto</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Posts</span> entity <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"해당 게시글이 없습니다. id = \"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostsResponseDto</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>PostsApiControlle</code> 에 수정 기능 API 메서드를 작성합니다</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1/posts/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">PostsUpdateRequestDto</span> requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> postsService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1/posts/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">PostsResponseDto</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> postsService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>마지막으로 수정 기능의 테스트 코드를 <code>PostsApiControllerTest</code>에 추가합니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Posts_</span>수정된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//given</span>\n    <span class=\"token class-name\">Posts</span> savedPosts <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Long</span> updateId <span class=\"token operator\">=</span> savedPosts<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> expectedTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"title2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> expectedContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content2\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">PostsUpdateRequestDto</span> requestDto <span class=\"token operator\">=</span> <span class=\"token class-name\">PostsUpdateRequestDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span>expectedTitle<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>expectedContent<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:\"</span> <span class=\"token operator\">+</span> port <span class=\"token operator\">+</span> <span class=\"token string\">\"/api/v1/posts/\"</span> <span class=\"token operator\">+</span> updateId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">HttpEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PostsUpdateRequestDto</span><span class=\"token punctuation\">></span></span> requestEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//when</span>\n    <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> responseEntity <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span>PUT<span class=\"token punctuation\">,</span> requestEntity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>responseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>responseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">></span></span> all <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>expectedTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>expectedContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>테스트 결과가 다음과 같이 출력됩니다.</p>\n<p>[그림8-6] 수정 기능 테스트 결과<br><img src=\"./springboot-web-9/6-test_result_update.png\" alt=\"update test result\"></p>\n<h4 id=\"3-조회-기능-확인하기\"><a href=\"#3-조회-기능-확인하기\" class=\"headerlink\" title=\"3. 조회 기능 확인하기\"></a>3. 조회 기능 확인하기</h4><p>조회기능은 실제로 톰캣을 실행해서 확인해보도록 하겠습니다. 로컬환경에선 데이터베이스를 h2를 사용하기 때문에 직접 접근하기 위해서는 웹 콘솔을 사용해야 합니다.</p>\n<p>먼저 웹 콘솔 옵션을 활성화해봅시다. <code>application.properties</code>에 다음과 같은 옵션을 추가합니다</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.h2.console.enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>추가한 후 Application 클래스의 메인 메서드를 실행, <strong><a href=\"http://localhost:8080/h2-console\">http://localhost:8080/h2-console</a></strong>로 접속해주세요.<br>그러면 웹 콘솔화면이 나타날 것입니다. </p>\n<p>[그림8-7] h2 console page<br><img src=\"./springboot-web-9/7-h2_console.png\" alt=\"h2 console page\"></p>\n<p>JDBC URL이 <code>jdbc:h2:mem:testdb</code>로 되어있지 않다면 똑같이 작성해주세요.</p>\n<p>자 그럼 Connect 버튼을 클릭하여 현재 프로젝트의 h2를 관리할 수 있는 페이지로 이동합시다.<br>왼쪽 상단에 POSTS 테이블이 정상적으로 노출되어야 합니다.</p>\n<p>[그림8-8] h2 console main page<br><img src=\"./springboot-web-9/8-h2_console_main_page.png\" alt=\"h2 console main page\"></p>\n<p>그럼 간단한 쿼리를 실행해봅시다!</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> posts<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>등록된 데이터가 없어 결과가 나오지 않지만 문제없이 동작합니다.<br>이번엔 간단하게 데이터를 집어넣은 후에 이를 API로 조회해보겠습니다.</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> posts<span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>등록된 데이터를 요청해보겠습니다. url은 <code>http://localhost:8080/api/v1/posts/1</code> 입니다</p>\n<p>[그림8-9] API request result<br><img src=\"./springboot-web-9/9-request_api_result.png\" alt=\"API request result\"></p>\n<p>요청한 데이터가 잘 넘어오는 것을 확인할 수 있습니다 :)</p>\n<hr>\n<p>이제 기본적인 등록, 수정, 조회 기능을 사용할 수 있게 되었습니다!<br>다음 포스트에서는 JPA Auditing을 통해 생성 시간과 수정 시간을 자동화해보도록 하곘습니다.</p>\n","feature":true,"text":"등록, 수정, 조회 API 만들기API를 만들기 위해서는 총 3개의 클래스가 필요합니다. Request 데이터를 받을 DTO API 요청을 받을 Controller 트랜잭션, 도메인 기능 간의 순서를 보장하는 Service 여기서 Service는 트랜...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":9,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":9,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"JPA","slug":"JPA","count":3,"path":"api/tags/JPA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EB%93%B1%EB%A1%9D-%EC%88%98%EC%A0%95-%EC%A1%B0%ED%9A%8C-API-%EB%A7%8C%EB%93%A4%EA%B8%B0\"><span class=\"toc-text\">등록, 수정, 조회 API 만들기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-%EB%93%B1%EB%A1%9D-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">8-1 등록 기능 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%EC%88%98%EC%A0%95-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">8-2 수정 기능 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%EC%A1%B0%ED%9A%8C-%EA%B8%B0%EB%8A%A5-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">3. 조회 기능 확인하기</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{},"next_post":{"title":"7. 프로젝트에 Spring Data JPA 적용하기","uid":"6f509e2dbed1e4f5397d3d96a9fdd4cd","slug":"springboot-web-8","date":"2021-07-03T09:59:14.000Z","updated":"2021-07-05T04:39:20.859Z","comments":true,"path":"api/articles/springboot-web-8.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"지난 포스트에서는 JPA가 무엇이고, 왜 사용하는 것인지에 대해 알아보았습니다.이번 포스트에서는 프로젝트에 Spring Data JPA 를 적용해보도록하겠습니다. 프로젝트에 Spring Data JPA 적용하기7-1 Spring Data JPA 의존성...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":9,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":9,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"JPA","slug":"JPA","count":3,"path":"api/tags/JPA.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}