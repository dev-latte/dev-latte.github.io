{"title":"10. 머스테치(mustache)로 화면 구성하기","uid":"6cbdd4fd25742628092b5aa717b3e98a","slug":"springboot-web-11","date":"2021-07-21T07:37:52.000Z","updated":"2021-07-21T08:41:05.304Z","comments":true,"path":"api/articles/springboot-web-11.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<p>이번 포스트는 머스테치를 이용한 프론트 엔드 개발을 설명하겠습니다.</p>\n<h3 id=\"머스테치-mustache-로-화면-구성하기\"><a href=\"#머스테치-mustache-로-화면-구성하기\" class=\"headerlink\" title=\"머스테치(mustache)로 화면 구성하기\"></a>머스테치(mustache)로 화면 구성하기</h3><h4 id=\"10-1-템플릿-엔진-Template-Engine-이란\"><a href=\"#10-1-템플릿-엔진-Template-Engine-이란\" class=\"headerlink\" title=\"10-1 템플릿 엔진(Template Engine)이란?\"></a>10-1 템플릿 엔진(Template Engine)이란?</h4><p>템플릿 엔진(Template Engine)이란, 지정된 템플릿 양식과 특정 데이터 모델에 따른 입력 자료를 합성하여 결과 문서를 출력하는 소프트웨어(혹은 소프트웨어 컴포넌트)를 말합니다. 이전에 스프링이나 서블릿을 사용했던 분들은 JSP, Freemarker 등을 떠올리실테고, 최근 개발을 시작한 독자들은 리액트, 뷰 등의 프레임워크를 떠올릴 것입니다.</p>\n<p>다만, 이들은 조금 차이가 있습니다. 전자는 서버 템플릿 엔진이라 불리고, 후자는 클라이언트 템플릿 엔진이라 불립니다. 간단하게 설명하자면 <code>서버 템플릿 엔진</code>은 서버쪽에서 구동되는 것을 의미하며, <code>클라이언트 템플릿 엔진</code>은 브라우저(클라이언트 측) 위에서 작동되는 템플릿 엔진이라는 겁니다.</p>\n<table>\n<thead>\n<tr>\n<th><strong>서버 사이드 템플릿 엔진</strong></th>\n<th><strong>클라이언트 사이드 템플릿 엔진</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>서버에서 DB 혹은 API에서 가져온 데이터를 미리 정의된 Template에 넣어 html을 그려서 클라이언트에 전달해주는 역할을 한다.</td>\n<td>HTML 형태로 코드를 작성할 수 있으며, 데이터를 받아 DOM 객체에 동적으로 그려주는 프로세스를 담당한다.</td>\n</tr>\n<tr>\n<td>HTML 코드에서 고정적으로 사용되는 부분은 템플릿으로 만들어두고, 동적으로 생성되는 부분만 템플릿 특정장소에 끼워넣는 방식으로 동작할 수 있도록 해준다.</td>\n<td>자바스크립트의 랜더링이 끝난 뒤(HTML DOM이 다 그려진 후)에 서버통신 없이 화면 변경이 필요한 경우에 사용된다.</td>\n</tr>\n</tbody></table>\n<p>출처 : <a href=\"https://gmlwjd9405.github.io/2018/12/21/template-engine.html\">[Template Engine] 템플릿 엔진(Template Engine)이란?</a></p>\n<h4 id=\"10-2-머스테치-mustache\"><a href=\"#10-2-머스테치-mustache\" class=\"headerlink\" title=\"10-2 머스테치(mustache)\"></a>10-2 머스테치(mustache)</h4><p>자바에는 흔히 JSP, Velociry, Freemarker, Thymeleaf 등의 서버 템플릿 엔진이 존재하지만, 여러가지 문제점이 존재합니다. 때문에 이 프로젝트에서는 **머스테치(mustache)**를 사용합니다.</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\"><strong>JSP, Velociry, Freemarker, Thymeleaf의 문제점</strong></p>\n<ul>\n<li><strong>JPS</strong><br>: 임베디드 서블릿 컨테이너를 사용하는 스프링 부트에서 제약이 많아 스프링 부트에서는 권장하지 않습니다.</li>\n<li><strong>Velocity</strong><em>(사용중지)</em><br>: Spring 버전 4.3부터 지원하지 않습니다. </li>\n<li><strong>Freemarker</strong><br>: 템플릿 엔진으로는 너무 과하게 많은 기능을 지원하며 높은 자유도로 인해 숙련도가 낮을수록 Freemarker 안에 비지니스 로직이 추가될 가능성이 높습니다.<br>: 또한, 몇 년 동안 업데이트되지 않고 있어 권장하지 않습니다.</li>\n<li><strong>Thymeleaf</strong><br>: 스프링에서 적극적으로 밀고있으나, 자바스크립트와 태그 속성 위주의 문법이므로 서버 엔지니어에게는 다소 문법이 어려울 수 있습니다.</li>\n</ul>\n\n</div>\n<p><a href=\"http://mustache.github.io/\">머스테치</a>(mustache)는 루비, 자바스크립트, 파이썬, php, 자바, 펄, Go, ASP등 현존하는 대부분 언어를 지원하는 가장 심플한 템플릿 엔진입니다. 그러다보니 자바에서 사용될 때는 서버 템플릿 엔진으로, 자바스크립트에서 사용될때에는 클라이언트 템플릿 엔진으로 사용됩니다.</p>\n<p>머스테치의 장점은 아래와 같습니다.</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\"><strong>머스테치(mustache)의 장점</strong></p>\n<p><ul>\n<li>문법이 다른 템플릿 엔진보다 심플합니다.</li>\n<li>로직 코드를 사용할 수 없어 View의 역할과 서버의 역할이 명확하게 분리됩니다.</li>\n<li>mustache.js와 mustache.java 2가지 다 있어, 하나의 문법으로 클라이언트/서버 템플릿을 모두 사용 가능합니다.</li>\n</ul>\n</p>\n</div>\n<p>(참고로, 템플릿 엔진은 화면의 역할에 충실해야 합니다. 너무 많은 기능을 제공하면 로직을 서로 나눠 갖게 되어 역할 분담 및 유지 보수가 어렵게 됩니다.)</p>\n<p>이제 인텔리제이에 머스테치를 사용하기 위한 플러그인을 설치해봅시다.</p>\n<h4 id=\"10-3-머스테치-플러그인-설치\"><a href=\"#10-3-머스테치-플러그인-설치\" class=\"headerlink\" title=\"10-3 머스테치 플러그인 설치\"></a>10-3 머스테치 플러그인 설치</h4><p>IntelliJ의 Plugins에서 <code>mustache</code>를 검색한 후 설치해주세요. 설치 후에는 IntelliJ를 재기동해주세요.<br>[그림10-1] 머스테치 플러그인 설치<br><img src=\"./springboot-web-11/1-search_mustache_plugins.png\" alt=\"머스테치 플러그인 설치\"><br>(저는 설치된 상태라 installed에 표시되지만 여러분은 <code>marketplace</code>에 표시될 것입니다)</p>\n<h4 id=\"10-4-머스테치-의존성-추가\"><a href=\"#10-4-머스테치-의존성-추가\" class=\"headerlink\" title=\"10-4 머스테치 의존성 추가\"></a>10-4 머스테치 의존성 추가</h4><p>이제 스프링 부트 프로젝트에서 머스테치를 편하게 사용할 수 있도록 머스테치 스타터 의존성을 <code>build.gradle</code>에 추가해줍니다.</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">dependencies &#123;\n...\nimplementation group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-mustache&#39;, version: &#39;2.3.12.RELEASE&#39;\n...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>머스테치는 스프링부트에서 공식 지원하는 템플릿 엔진이므로, 의존성 하나만 추가하면 추가 설정 없이 설치가 끝입니다.</p>\n<h4 id=\"10-5-머스테치-기본-페이지-index-생성\"><a href=\"#10-5-머스테치-기본-페이지-index-생성\" class=\"headerlink\" title=\"10-5 머스테치 기본 페이지(index) 생성\"></a>10-5 머스테치 기본 페이지(index) 생성</h4><p>머스테치의 파일 위치는 기본적으로 <code>src/main/resources/templates</code>입니다. 이 위치에 머스테치 파일을 두면 스프링 부트에서 자동으로 로딩합니다. 첫 페이지를 담당할 <code>index.mustache</code>를 저 위치에 생성해봅시다. <code>index.mustache</code>의 내용은 아래와 같습니다</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>스프링 부트 웹 서비스<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>스프링 부트로 시작하는 웹 서비스<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 페이지는 간단하게 h1 크기로 “스프링 부트로 시작하는 웹 서비스”를 출력하는 페이지입니다.</p>\n<p>이제 이 머스테치에 URL을 매핑해봅시다. 매핑은 당연히 Controller에서 진행합니다.<br>web 패키지 안에 <code>IndexController</code>를 생성해주세요.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>머스테치 스타터 덕분에 컨트롤러에서 문자열을 반환할 때 앞의 경로(<code>src/main/resources/templates</code>)와 뒤의 파일 확장자(<code>.mustache</code>)가 자동으로 지정됩니다. 즉, 여기서는 “index”를 반환하므로 URL은 <strong>“src/main/resources/templates/index.mustache”</strong> 로 전환되어 View Resolver가 처리하게 됩니다.</p>\n<p>여기까지 코드가 완성되었다면, 테스트 코드로 검증해보겠습니다. test 패키지에 <code>IndexControllerTest</code> 클래스를 생성합니다. 코드는 다음과 같습니다</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExtendWith</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>assertj<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>assertThat<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span>RANDOM_PORT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexControllerTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestRestTemplate</span> restTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 메인페이지_로딩<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//when</span>\n        <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스프링 부트로 시작하는 웹 서비스\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이 테스트는 실제로 <strong>URL 호출 시 페이지의 내용이 제대로 호출되는 지</strong>에 대한 테스트입니다. 테스트를 실행하면, h1 크기로 표시했던 “스프링 부트로 시작하는 웹 서비스”가 포함되어 테스트가 성공하는 것을 확인할 수 있습니다.</p>\n<p>[그림10-2] 메인페이지 로딩 테스트<br><img src=\"./springboot-web-11/2-test_result.png\" alt=\"메인페이지 로딩 테스트\"></p>\n<p>테스트도 성공하였으나, 이제 실제로 화면이 잘 나오는지 확인해보겠습니다.</p>\n<p><code>Application.java</code>의 main메서드를 실행하고 브라우저에서 <a href=\"http://localhost:8080/\">http://localhost:8080</a> 으로 접속해보겠습니다.</p>\n<p>[그림10-3] index 페이지 접속 확인<br><img src=\"./springboot-web-11/3-index_page.png\" alt=\"index 페이지 접속 확인\"><br>정상적으로 index파일에 접근하여 h1 크기의 “스프링 부트로 시작하는 웹 서비스”가 출력되는 것을 확인했습니다.</p>\n<hr>\n<p>여기까지, 템플릿 엔진에 대한 간단한 설명과 머스테치의 설치방법에 대해서 알아보았습니다.<br>다음 포스트에서는 머스테치를 이용하여 게시글의 CRUD 화면을 작성해보도록 하겠습니다.</p>\n","feature":true,"text":"이번 포스트는 머스테치를 이용한 프론트 엔드 개발을 설명하겠습니다. 머스테치(mustache)로 화면 구성하기10-1 템플릿 엔진(Template Engine)이란?템플릿 엔진(Template Engine)이란, 지정된 템플릿 양식과 특정 데이터 모델...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":11,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":11,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"},{"name":"JPA Auditing","slug":"JPA-Auditing","count":2,"path":"api/tags/JPA-Auditing.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EB%A8%B8%EC%8A%A4%ED%85%8C%EC%B9%98-mustache-%EB%A1%9C-%ED%99%94%EB%A9%B4-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">머스테치(mustache)로 화면 구성하기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%97%94%EC%A7%84-Template-Engine-%EC%9D%B4%EB%9E%80\"><span class=\"toc-text\">10-1 템플릿 엔진(Template Engine)이란?</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-%EB%A8%B8%EC%8A%A4%ED%85%8C%EC%B9%98-mustache\"><span class=\"toc-text\">10-2 머스테치(mustache)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-3-%EB%A8%B8%EC%8A%A4%ED%85%8C%EC%B9%98-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98\"><span class=\"toc-text\">10-3 머스테치 플러그인 설치</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-4-%EB%A8%B8%EC%8A%A4%ED%85%8C%EC%B9%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">10-4 머스테치 의존성 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-5-%EB%A8%B8%EC%8A%A4%ED%85%8C%EC%B9%98-%EA%B8%B0%EB%B3%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-index-%EC%83%9D%EC%84%B1\"><span class=\"toc-text\">10-5 머스테치 기본 페이지(index) 생성</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{"title":"5. DFS/BFS","uid":"9823f8c5a18f804c1c6c693243f76046","slug":"algorithm-DFS-BFS","date":"2021-08-09T06:53:40.000Z","updated":"2021-08-09T13:54:04.215Z","comments":true,"path":"api/articles/algorithm-DFS-BFS.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/algorithm.jpeg","text":"CS에서 탐색(Search)이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미합니다.프로그래밍에서는 주로 자료구조 안에서 탐색하는 경우가 많습니다.(자료구조에 대한 자세한 설명은 여기에서 확인해주세요) 5. DFS(깊이 우선 탐색) / B...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"알고리즘","slug":"알고리즘","count":5,"path":"api/categories/알고리즘.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"},{"name":"DFS","slug":"DFS","count":1,"path":"api/tags/DFS.json"},{"name":"BFS","slug":"BFS","count":1,"path":"api/tags/BFS.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true},"next_post":{"title":"4. 재귀 함수(Recursive Function)","uid":"9ed3a98723cc8a223c9fd2c456508919","slug":"algorithm-recursive-function","date":"2021-07-15T02:00:06.000Z","updated":"2021-07-15T04:23:37.944Z","comments":true,"path":"api/articles/algorithm-recursive-function.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/algorithm.jpeg","text":"DFS(Depth-First Srarch) 및 BFS(Breadth First Search)에 대해 정리하다보니, 이를 이해하기 위해서는 그래프, 스택, 재귀 함수에 대한 이해가 필요하다는 것을 알게 되었습니다. 그래프와 스택은 이전에 정리해두었으니,...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"알고리즘","slug":"알고리즘","count":5,"path":"api/categories/알고리즘.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"},{"name":"Recursive Function","slug":"Recursive-Function","count":1,"path":"api/tags/Recursive-Function.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}