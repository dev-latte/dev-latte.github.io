{"title":"9. JPA Auditing","uid":"cbd579b642610e229f2314ec50cc2bc8","slug":"springboot-web-10","date":"2021-07-10T05:31:52.000Z","updated":"2021-07-10T06:22:41.952Z","comments":true,"path":"api/articles/springboot-web-10.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<h3 id=\"JPA-Auditing-으로-생성시간-수정시간-자동화하기\"><a href=\"#JPA-Auditing-으로-생성시간-수정시간-자동화하기\" class=\"headerlink\" title=\"JPA Auditing 으로 생성시간/수정시간 자동화하기\"></a>JPA Auditing 으로 생성시간/수정시간 자동화하기</h3><p>보통 엔티티(Entity)는 해당 데이터의 <strong>생성 시간</strong>과 <strong>수정 시간</strong>을 반드시 갖고 있습니다.<br>언제 만들어졌는지, 언제 수정되었는지 등의 정보는 차후 유지 보수에 있어 굉장히 중요한 정보이기 때문입니다.<br>그렇다보니 DB에 삽입(Insert)하기 전, 갱신(Update)하기 전에 날짜 데이터를 등록하거나 수정하는 코드가 반복해서 들어가게 됩니다.</p>\n<p>게시글의 생성일을 예로 들어보겠습니다. 게시글의 엔티티에 생성일의 정보를 추가하기 위해서는 게시글을 생성하는 코드에 현재 시간을 셋팅하는 코드를 추가해야합니다. 이것이 한 줄 정도였다면 크게 문제가 되지 않지만, 복수의 엔티티에 추가된다고 생각해봅시다. 추가나 변경이 있을때마다 코드를 일일히 추가하거나 수정해주어야 하고, 이렇게되면 쓸데없이 코드가 길어지게됩니다.</p>\n<p>그래서 이 문제를 해결하고자 <strong>JPA Auditing</strong> 을 사용하겠습니다.</p>\n<h4 id=\"9-1-LocalDate-사용\"><a href=\"#9-1-LocalDate-사용\" class=\"headerlink\" title=\"9-1 LocalDate 사용\"></a>9-1 LocalDate 사용</h4><p>Java8 이전 버전의 Java를 사용했던 분들은 현재 시간을 가져오는 방식으로 <code>Date</code> 혹은 <code>Calendar</code> 클래스를 사용했을겁니다. 그러나 이 클래스들은 다음과 같은 <strong>문제점</strong>이 있었습니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Date와 Calendar 클래스의 문제점</strong></p>\n<ul>\n<li>불변(변경이 불가능한) 객체가 아닙니다.<br>: 멀티 스레드 환경에서 언제든 문제가 발생할 수 있습니다.</li>\n<li>Calendar는 월(Month) 값 설계가 잘못 되었습니다.<br>: 10월을 나타내는 Calendar.OCTOBER의 숫자값은 ‘9’입니다.<br>: Enum의 표기(OCTOBER)와 실제 숫자값(9)에서 발생하는 괴리는 큰 혼란을 가져옵니다.</li>\n</ul></blockquote>\n<p>때문에 Java8부터 <strong>LocalDate</strong>와 <strong>LocalDateTime</strong>이 등장했습니다. 이는 Java의 기본 날짜 타입이었던 Date의 문제점을 제대로 고친 타입이므로 이것으로 사용을 대체할 것을 권장합니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>LocalDate</strong> vs <strong>LocalTime</strong> vs <strong>LocalDateTime</strong>  </p>\n<ul>\n<li>LocalDate<br>: 로컬 날짜 클래스로 날짜 정보만 필요할 때에 사용됩니다.<br>:<code>LocalDate currentDate = LocalDate.now();</code>  </li>\n<li>LocalTime<br>: 로컬 시간 클래스로 시간 정보만 필요할 떄에 사용됩니다.<br>:<code>LocalTime currentTime = LocalTime.now();</code>  </li>\n<li>LocalDateTime<br>: 날짜와 시간 정보 모두 필요할 때에 사용됩니다.<br>:<code>LocalDateTime currentDateTime = LocalDateTime.now();</code></li>\n</ul></blockquote>\n<p>그럼, 이 클래스를 이용하여 생성 시간 및 수정 시간을 추가해보도록 하겠습니다.</p>\n<h4 id=\"9-2-JPA-Auditing-기능-추가하기\"><a href=\"#9-2-JPA-Auditing-기능-추가하기\" class=\"headerlink\" title=\"9-2 JPA Auditing 기능 추가하기\"></a>9-2 JPA Auditing 기능 추가하기</h4><p>먼저 domain 패키지에 <code>BaseTimeEntity</code>라는 이름의 추상클래스를 생성하고 아래의 코드를 추가합니다.<br>이 <code>BaseTimeEntity</code> 클래스는 모든 Entity의 <strong>상위 클래스</strong>가 되어 Entity들의 createdDate, modifiedDate를 자동으로 관리하는 역할을 하게 됩니다.</p>\n<p>[그림9-1] BaseTimeEntity 클래스 경로<br><img src=\"./springboot-web-10/1-BaseTImeEntity_class_path.png\" alt=\"BaseTImeEntity classpath\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CreatedDate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LastModifiedDate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuditingEntityListener</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityListeners</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MappedSuperclass</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@MappedSuperclass</span>\n<span class=\"token annotation punctuation\">@EntityListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuditingEntityListener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseTimeEntity</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@CreatedDate</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createdDate<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@LastModifiedDate</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> modifiedDate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><strong>@MappedSuperclass</strong><br>: JPA Entity 클래스들이 BaseTimeEntity을 상속할 경우 BaseTimeEntity의 필드들도 칼럼으로 인식하도록 합니다.  </li>\n<li><strong>@EntityListeners(AuditingEntityListener.class)</strong><br>: BaseTimeEntity 클래스에 Auditing 기능을 포함시킵니다.  </li>\n<li><strong>@CreatedDate</strong><br>: Entity가 생성되어 저장될 떄 시간이 자동 저장됩니다.  </li>\n<li><strong>@LastModifiedDate</strong><br>: 조회한 Entity의 값을 변경할 떄 시간이 자동 저장됩니다.</li>\n</ul></blockquote>\n<p>이제, Post 클래스에 생성 시각과 수정 시각을 추가하기 위해 <strong>BaseTimeEntity를 상속받는 코드</strong>를 추가합니다!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Posts</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseTimeEntity</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>마지막으로 JPA Auditing 어노테이션을 활성화하기 위해 Application 클래스에 활성화를 위해 <code>@EnableJpaAuditing</code> 어노테이션을 추가합니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableJpaAuditing</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@EnableJpaAuditing</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>이제 JPA Auditing을 추가하는 코드가 완성되었습니다. 기능이 동작하는지 확인하기 위한 테스트 코드를 작성해 보도록 합시다.</p>\n<h4 id=\"9-3-JPA-Auditing-테스트-코드-작성하기\"><a href=\"#9-3-JPA-Auditing-테스트-코드-작성하기\" class=\"headerlink\" title=\"9-3 JPA Auditing 테스트 코드 작성하기\"></a>9-3 JPA Auditing 테스트 코드 작성하기</h4><p><code>PostsRepositoryTest</code> 클래스에 테스트 메소드를 하나 더 추가하겠습니다!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">BaseTimeEntity_</span>등록<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">></span></span> postsList <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token class-name\">Posts</span> posts <span class=\"token operator\">=</span> postsList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>>>>>>>> createDate=\"</span> <span class=\"token operator\">+</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">getCreatedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", modifiedDate=\"</span> <span class=\"token operator\">+</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">getCreatedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>테스트 코드를 수행해보면 다음과 같이 실제 시간이 잘 저장된 것을 확인할 수 있습니다</p>\n<p>[그림9-2] JPA Auditing 테스트 코드 실행 결과<br><img src=\"./springboot-web-10/2-JPA_Auditing_tset_result.png\" alt=\"JPA Auditing tset result\"></p>\n<p>앞으로 추가될 엔티티들은 더 이상 등록일/수정일로 고민할 필요 없이 <strong>BaseTimeEntity를 상속</strong>받으면 됩니다.</p>\n<p>간단하죠?</p>\n<hr>\n<p>지금까지 JPA Auditing을 이용하여 엔티티에 생성 시간, 수정 시간을 추가하는 방법을 알아보았습니다.<br>다음 포스트에는 템플릿 엔진을 이용하여 화면을 만들어보겠습니다.</p>\n","feature":true,"text":"JPA Auditing 으로 생성시간/수정시간 자동화하기보통 엔티티(Entity)는 해당 데이터의 생성 시간과 수정 시간을 반드시 갖고 있습니다.언제 만들어졌는지, 언제 수정되었는지 등의 정보는 차후 유지 보수에 있어 굉장히 중요한 정보이기 때문입니다...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":10,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":10,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JPA Auditing","slug":"JPA-Auditing","count":1,"path":"api/tags/JPA-Auditing.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JPA-Auditing-%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EC%8B%9C%EA%B0%84-%EC%88%98%EC%A0%95%EC%8B%9C%EA%B0%84-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">JPA Auditing 으로 생성시간&#x2F;수정시간 자동화하기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-LocalDate-%EC%82%AC%EC%9A%A9\"><span class=\"toc-text\">9-1 LocalDate 사용</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-JPA-Auditing-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">9-2 JPA Auditing 기능 추가하기</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-3-JPA-Auditing-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">9-3 JPA Auditing 테스트 코드 작성하기</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{},"next_post":{"title":"8. 등록, 수정, 조회 API 만들기","uid":"46bc520d99f0fdb2597458e927fef029","slug":"springboot-web-9","date":"2021-07-05T07:00:07.000Z","updated":"2021-07-10T05:57:21.891Z","comments":true,"path":"api/articles/springboot-web-9.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"등록, 수정, 조회 API 만들기API를 만들기 위해서는 총 3개의 클래스가 필요합니다. Request 데이터를 받을 DTO API 요청을 받을 Controller 트랜잭션, 도메인 기능 간의 순서를 보장하는 Service 여기서 Service는 트랜...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":10,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":10,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JPA","slug":"JPA","count":3,"path":"api/tags/JPA.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}