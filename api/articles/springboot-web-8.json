{"title":"7. 프로젝트에 Spring Data JPA 적용하기","uid":"6f509e2dbed1e4f5397d3d96a9fdd4cd","slug":"springboot-web-8","date":"2021-07-03T09:59:14.000Z","updated":"2021-07-05T04:39:20.859Z","comments":true,"path":"api/articles/springboot-web-8.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<p>지난 포스트에서는 JPA가 무엇이고, 왜 사용하는 것인지에 대해 알아보았습니다.<br>이번 포스트에서는 프로젝트에 <strong>Spring Data JPA</strong> 를 적용해보도록하겠습니다.</p>\n<h3 id=\"프로젝트에-Spring-Data-JPA-적용하기\"><a href=\"#프로젝트에-Spring-Data-JPA-적용하기\" class=\"headerlink\" title=\"프로젝트에 Spring Data JPA 적용하기\"></a>프로젝트에 Spring Data JPA 적용하기</h3><h4 id=\"7-1-Spring-Data-JPA-의존성-등록하기\"><a href=\"#7-1-Spring-Data-JPA-의존성-등록하기\" class=\"headerlink\" title=\"7-1 Spring Data JPA 의존성 등록하기\"></a>7-1 Spring Data JPA 의존성 등록하기</h4><p><code>build.gradle</code>에 아래와 같이 <strong>Spring Data JPA</strong> 와 <strong>h2</strong> 의 의존성을 등록합니다.</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">&#x2F;&#x2F; spring-boot-starter-data-jpa\nimplementation group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-data-jpa&#39;, version: &#39;2.5.1&#39;\n&#x2F;&#x2F; h2\ncompile(&#39;com.h2database:h2&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><strong>spring-boot-starter-data-jpa</strong><br>: 스프링 부트용 Spring Data JPA     추상화 라이브러리입니다.<br>: 스프링 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해줍니다.</li>\n<li><strong>h2</strong><br>: 인메모리(In-memory) 관계형 데이터베이스로 메인 메모리(RAM)에 설치되어 운영되는 DB 시스템을 말합니다.<br>: 메모리에서 실행되기 때문에 설치가 필요없고, 애플리케이션을 재시작할 때마다 초기화되는 특징을 지닙니다.<br>: 이런 특징을 이용하여 테스트용도로 많이 사용되며, 이 포스트는 JPA 테스트 및 로컬환경에서의 구동에 사용됩니다.</li>\n</ul></blockquote>\n<p>의존성 등록이 완료되었으니 JPA기능을 사용하기 위해 기능을 추가해보도록 하겠습니다.</p>\n<h4 id=\"7-2-JPA-기능-추가\"><a href=\"#7-2-JPA-기능-추가\" class=\"headerlink\" title=\"7-2 JPA 기능 추가\"></a>7-2 JPA 기능 추가</h4><p>이제 JPA 기능을 추가하겠습니다!<br>먼저 springboot 패키지 아래의 경로에 <strong>domain 패키지</strong> 를 생성합니다.<br>이 패키지는 도메인을 담는 패키지가 됩니다.</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">도메인(Domain)이란?</p>\n<p><ul>\n<li>책에서 말하는 domain은 DDD(Domain-driven design)의 domain 개념과 유사합니다.</li>\n<li>게시글, 댓글, 회원, 정산, 결제 등 소프트웨어에 대한 요구사항 혹은 문제영역을 의미합니다.</li>\n<li>예를 들어, 게시판이라는 큰 도메인(Domain) 안에는 부분 집합인 게시글, 회원, 정산, 댓글 등은 서브 도메인(Sub Domain)이 존재합니다.<a href=\"https://steemit.com/kr/@frontalnh/domain-driven-design\">(출처 : Domain Driven Design 이란 무엇인가?)</a></li>\n</ul>\n</p>\n</div>\n<p>기존에 Mybatis와 같은 쿼리 매퍼를 사용했다면 dao 패키지를 떠올리실겁니다. 다만, 도메인은 Dao 패지키와는 조금 결이 다릅니다. 그동안 xml에 쿼리를 담고, 클래스는 오로지 쿼리의 결과만 담던 일들이 모두 도메인 클래스라고 불리는 곳에서 해결됩니다.</p>\n<p>그럼 domain 패키지에 <strong>posts 패키지</strong>와 <strong>Posts 클래스</strong> 를 만듭니다.<br>Posts 클래스의 코드는 다음과 같습니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>latte<span class=\"token punctuation\">.</span>springboot<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>posts</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Column</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Posts</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>columnDefinition <span class=\"token operator\">=</span> <span class=\"token string\">\"TEXT\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Posts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><strong>@Entity</strong><br>:  DB의 테이블과 링크될 클래스임을 나타내는 어노테이션입니다.<br>: 매칭은 기본적으로 클래스의 이름을 언더스코어로 변경하여 매칭합니다. (예 - SalesManager.java → sales_manager 테이블)</li>\n<li><strong>@Id</strong><br>:  해당 테이블의 PK를 지정하는 어노테이션입니다.</li>\n<li><strong>@GeneratedValue</strong><br>:  PK 생성 규칙을 의미하는 어노테이션입니다.<br>: 옵션값을 지정해주어야합니다. 이 클래스에서는 <code>GenerationType.IDENTITY</code>옵션을 사용합니다.  </li>\n<li><strong>@Column</strong><br>:  테이블의 칼럼을 나타냅니다.<br>: 선언하지 않더라도 해당 클래스의 필드는 모두 칼럼이 됩니다.<br>: 기본 값 외에 <strong>추가로 변경할 옵션</strong>이 있을 때에 주로 사용합니다.</li>\n</ul></blockquote>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">@GeneratedValue의 옵션</p>\n<ul>\n<li><code>GenerationType.AUTO</code> : 기본 설정 값(Default)  </li>\n<li><code>GenerationType.IDENTITY</code> : 기본 키(PK) 생성을 데이터베이스에 위임하는 옵션  </li>\n<li><code>GenerationType.SEQUNCE</code> : 데이터베이스의 시퀀스 object를 이용하는 옵션  </li>\n<li><code>GenerationType.TABLE</code> : 키 생성 전용 테이블을 하나 만들어서 데이터베이스 시퀀스를 흉내내는 옵션  </li>\n</ul>\n\n</div>\n<p>이 Posts 클래스에는 Setter 메서드가 없습니다. VO를 생성하면서 getter/setter 를 무작정 생성하는 경우가 있는데, 이렇게되면 해당 클래스의 인스턴스 값들이 언제 어디서 변해야하는지 코드상으로 명확하게 구분할 수 없어 차후 기능 변경 시 정말 복잡해집니다.</p>\n<p>때문에 <strong>Entity클래스에서는 절대 Setter 메서드를 만들지 않습니다.</strong><br>그렇다면, setter 메서드가 없는 이 상황에서 어떻게 값을 채워 DB에 삽입해야 할까요?</p>\n<p>기본적인 구조는 생성자를 통해 최종 값을 채운 후 DB에 값을 삽입하는 것이며, 값 변경이 필요한 경우 목적과 의도를 나타낼 수 있는 메서드를 추가한 후 해당 메소드를 호출하여 변경합니다.</p>\n<p>이 책에는 생성자 대신에 <strong>@Builder</strong>를 통해 제공되는 빌더 클래스를 사용합니다.</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">빌더 패턴(Builder pattern)</p>\n<p><ul>\n<li>빌더 패턴(Builder pattern)이란 복잡한 객체를 생성하는 방법과 표현하는 방법을 정의하는 클래스를 별도로 분리하여 서로 다른 표현이라도 이를 생성할 수 있는 동일한 구축 공정을 제공할 수 있도록 한다.</li>\n<li>이 프로젝트에서는 롬복의 @Builder 애노테이션으로 쉽게 사용할 수 있다.<br><a href=\"https://johngrib.github.io/wiki/builder-pattern/#lombok-builder\">(출처 : 빌더 패턴(Builder Pattern))</a></li>\n</ul>\n</p>\n</div>\n<p>모든 예제는 이렇게 빌더 패턴을 적극적을 사용하지 잘 알아두시면 좋습니다</p>\n<p>Posts 클래스 생성이 끝났다면, Posts 클래스로 database를 접근하게 해줄 JpaRepository 인터페이스를 생성합니다.<br>위치는 posts 디렉토리 아래이며 인터페이스 명은 PostsRepository입니다.</p>\n<p>[그림7-1] Posts 클래스와 PostsRepository 인터페이스의 경로<br><img src=\"./springboot-web-8/1-Posts_and_PostsRepository_path.png\" alt=\"Posts class and PostsRepository\"></p>\n<p>Repository는 ibatis나 Mybatis등에서 Dao라고 불리는 <strong>JPA의 DB Layer 접근자</strong>입니다.<br>인터페이스로 생성하며 <code>JpaRepository&lt;Entity, pk_데이터타입&gt;</code>을 상속하면 기본적인 CRUD메소드가 자동으로 생성됩니다. @Repository를 추가할 필요도 없습니다. </p>\n<p>주의할 점은 Entity와 Repository는 <strong>항상 같은 패키지에 위치</strong>해야한다는 것입니다.<br>나중에 프로젝트 규모가 커져 도메인별로 프로젝트를 분리해야한다면 이때 Entity 클래스와 기본 Repository는 함께 움직여야하므로 domain패키지에서 함께 관리합니다.</p>\n<p>이제, 작성한 코드를 테스트를 통해 기능 검증해보도록 하겠습니다.</p>\n<h4 id=\"7-3-Spring-Data-JPA-테스트-코드-작성하기\"><a href=\"#7-3-Spring-Data-JPA-테스트-코드-작성하기\" class=\"headerlink\" title=\"7-3. Spring Data JPA 테스트 코드 작성하기\"></a>7-3. Spring Data JPA 테스트 코드 작성하기</h4><p>먼저, PostsRepository의 테스트클래스를 생성합니다. 테스트 클래스의 이름은 <code>PostsRepositoryTest</code>입니다.<br>위치는 test 디렉토리 아래이며, 패키지 경로는 main 디렉토리의 PostsRepository의 경로와 같습니다.</p>\n<p>[그림7-2] PostsRepositoryTest의 경로<br><img src=\"./springboot-web-8/2-PostsRepositoryTest_path.png\" alt=\"PostsRepositoryTest_path\"></p>\n<p>PostsRepositoryTest에서는 <strong>save</strong>와 <strong>findAll</strong> 기능을 테스트합니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>latte<span class=\"token punctuation\">.</span>springboot<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>posts</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterEach</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExtendWith</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>assertj<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>assertThat<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsRepositoryTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">PostsRepository</span> postsRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@AfterEach</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cleanUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 게시글저장_불러오기<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"테스트게시글\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"테스트본문\"</span><span class=\"token punctuation\">;</span>\n\n        postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Latte\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token punctuation\">></span></span> postsList <span class=\"token operator\">=</span> postsRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// then</span>\n        <span class=\"token class-name\">Posts</span> posts <span class=\"token operator\">=</span> postsList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>작성이 완료되었다면 테스트를 실행, test passed가 보이면 문제없이 Spring Data JPA가 동작하는 것입니다.</p>\n<p>[그림7-3] 테스트 결과<br><img src=\"./springboot-web-8/3-PostsRepositoryTest_result.png\" alt=\"PostsRepositoryTest_result\"></p>\n<p>여기서 <strong>실제로 실행된 쿼리 로그를 보고싶다</strong>면 resources 디렉토리 아래에 <code>application.properties</code> 파일을 생성하고 아래와 같은 옵션을 추가해주세요.</p>\n<p>[그림7-4] application.properties 경로<br><img src=\"./springboot-web-8/4-application_properties_path.png\" alt=\"application_properties_path\"></p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.jpa.show-sql</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>그럼 다음과 같은 쿼리 로그를 확인할 수 있습니다.</p>\n<p>[그림7-5] 쿼리 로그의 확인<br><img src=\"./springboot-web-8/5-query_log.png\" alt=\"query_log\"></p>\n<p>위의 쿼리 로그들 중에서 한 가지 걸리는 것이 있습니다. </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create table posts (id bigint generated by default as identity, author varchar(255), content TEXT not null, title varchar(500) not null, primary key (id))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>위의 create 쿼리가 그것인데요, 여기서 <code>id bigint generated by default as identity</code>라는 옵션이 보일겁니다.<br>이는 <strong>h2의 쿼리 문법</strong>이 적용되어 설정된 옵션입니다. <strong>MySQL</strong>의 문법이 익숙하신 분들을 위해 출력되는 쿼리 로그를 MySQL버전으로 바꾸는 것도 가능합니다. <code>application.properties</code>에 아래의 옵션을 추가해주세요</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.jpa.properties.hibernate.dialect</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.hibernate.dialect.MySQL5InnoDBDialect</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>추가 후에 코드를 다시 실행해봅시다!</p>\n<p>[그림7-6] 쿼리 로그를 MySql 문법으로<br><img src=\"./springboot-web-8/6-mysql_query_log.png\" alt=\"mysql_query_log\"></p>\n<p>사진과 같이 변경되었다면 옵션이 잘 적용된 것입니다!</p>\n<hr>\n<p>이번 포스트에서는 JPA와 h2에 대한 기본적인 기능과 설정을 진행하였으니, 다음 포스트에서 본격적으로 API기능을 만들어보겠습니다.</p>\n","feature":true,"text":"지난 포스트에서는 JPA가 무엇이고, 왜 사용하는 것인지에 대해 알아보았습니다.이번 포스트에서는 프로젝트에 Spring Data JPA 를 적용해보도록하겠습니다. 프로젝트에 Spring Data JPA 적용하기7-1 Spring Data JPA 의존성...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":10,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":10,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JPA","slug":"JPA","count":3,"path":"api/tags/JPA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-Spring-Data-JPA-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">프로젝트에 Spring Data JPA 적용하기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-Spring-Data-JPA-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">7-1 Spring Data JPA 의존성 등록하기</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-JPA-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">7-2 JPA 기능 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-Spring-Data-JPA-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\"><span class=\"toc-text\">7-3. Spring Data JPA 테스트 코드 작성하기</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{"title":"8. 등록, 수정, 조회 API 만들기","uid":"46bc520d99f0fdb2597458e927fef029","slug":"springboot-web-9","date":"2021-07-05T07:00:07.000Z","updated":"2021-07-10T05:57:21.891Z","comments":true,"path":"api/articles/springboot-web-9.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"등록, 수정, 조회 API 만들기API를 만들기 위해서는 총 3개의 클래스가 필요합니다. Request 데이터를 받을 DTO API 요청을 받을 Controller 트랜잭션, 도메인 기능 간의 순서를 보장하는 Service 여기서 Service는 트랜...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":10,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":10,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JPA","slug":"JPA","count":3,"path":"api/tags/JPA.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true},"next_post":{"title":"2. 선형구조 - 스택(Stack)과 큐(Queue)","uid":"02ccdc68ca28ee335d8d90d6267099db","slug":"cs-stack-and-queue","date":"2021-06-27T07:30:37.000Z","updated":"2021-07-11T07:30:54.609Z","comments":true,"path":"api/articles/cs-stack-and-queue.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/computer_science.jpeg","text":"오늘은 이전 포스트(자료구조)에 이어서 선형 구조 중 하나인 스택(Stack)과 큐(Queue)를 정리해보도록 하겠습니다. 선형구조 - 스택(Stack)과 큐(Queue)선형구조(Linear Structure)란 자료를 구성하는 데이터를 순차적으로 나...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Computer Science","slug":"Computer-Science","count":3,"path":"api/categories/Computer-Science.json"}],"tags":[{"name":"Linear Structure","slug":"Linear-Structure","count":1,"path":"api/tags/Linear-Structure.json"},{"name":"Stack","slug":"Stack","count":1,"path":"api/tags/Stack.json"},{"name":"Queue","slug":"Queue","count":1,"path":"api/tags/Queue.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}