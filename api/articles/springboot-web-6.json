{"title":"5. 롬복(Lombok)으로 기존 코드 리팩토링","uid":"08591114c8a1ce3933292eb92a5512bc","slug":"springboot-web-6","date":"2021-06-16T14:03:34.000Z","updated":"2021-06-16T15:52:52.090Z","comments":true,"path":"api/articles/springboot-web-6.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<p>이 포스트에서는 여태까지 작성한 코드를 롬복으로 리팩토링해보겠습니다. </p>\n<h3 id=\"롬복-Lombok-으로-기존-코드-리팩토링\"><a href=\"#롬복-Lombok-으로-기존-코드-리팩토링\" class=\"headerlink\" title=\"롬복(Lombok)으로 기존 코드 리팩토링\"></a>롬복(Lombok)으로 기존 코드 리팩토링</h3><h4 id=\"5-1-HelloResponseDto-클래스-추가\"><a href=\"#5-1-HelloResponseDto-클래스-추가\" class=\"headerlink\" title=\"5-1 HelloResponseDto 클래스 추가\"></a>5-1 HelloResponseDto 클래스 추가</h4><p>HelloResponseDto 클래스를 추가합니다.<br>위치는 <code>web 패키지 &gt; dto 패키지</code> 입니다. </p>\n<p>[그림5-1] HelloResponseDto 클래스 위치<br><img src=\"./springboot-web-6/1-HelloResponseDto_path.png\" alt=\"HelloResponseDto 클래스 위치\"><br><em>앞으로 모든 response dto는 이곳에 추가하도록 하겠습니다!</em></p>\n<p>여기서 DTO가 무엇이고, 왜 추가하는지 의문이신 분도 있을거라고 생각합니다.<br>DTO란 아래와 같습니다.</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">DTO(Data Transfer Object)란?</p>\n<p>계층간 데이터 교환을 위한 객체(Java Bean)이자, DB에서 얻은 데이터를 전송할 때 사용하는 객체.<br>로직(메서드)을 갖지 않는다는 특징이 있으며, DB에서 얻은 값을 수정하는 경우가 거의 없어 setter()는 갖지 않고 <code>getter()</code>만을 갖는 경우가 많다.</p>\n</div>\n<p>즉, <strong>DB에서 가져온 정보를 담거나 DB에 저장할 정보를 담는 그릇</strong>이 필요한데 그것이 DTO인 것입니다.<br>앞으로의 프로젝트는 데이터베이스의 데이터를 가져오거나 저장하는 동작을 할 것입니다.<br>때문에 DB와의 데이터 교환은 DTO를 통해 진행하도록 하겠습니다.</p>\n<p>참고로 DTO를 검색하면 항상 같이 나오는 DAO라는 용어가 있습니다.</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">DAO(Data Access Ocject)란?</p>\n<p>DB에 접근하는 객체로 이름 그대로 Service와 DB를 연결하는 역할을 하는 객체.</p>\n</div>\n<p>DTO와 DAO는 이름이 비슷하고 DB와 관련되어 있다는 공통점때문에 자주 헷갈리니, 여기서 한 번 읽어보고 가도록 합시다!</p>\n<h4 id=\"5-2-HelloResponseDto-코드-작성\"><a href=\"#5-2-HelloResponseDto-코드-작성\" class=\"headerlink\" title=\"5-2 HelloResponseDto 코드 작성\"></a>5-2 HelloResponseDto 코드 작성</h4><p>클래스 추가가 완료되었다면, 클래스 내부에 다음과 같은 코드를 작성합니다.</p>\n<pre><code class=\"java\">import lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n@Getter\n@RequiredArgsConstructor\npublic class HelloResponseDto &#123;\n    private final String name;\n    private final int amount;\n&#125;\n</code></pre>\n<p>주목해서 봐야할 것은 <code>@Getter</code>와 <code>@RequiredArgsConstructor</code>입니다.<br>이들의 내용은 아래와 같습니다.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>@Getter<br>: 선언된 모든 필드의  getter를 생성해줍니다.  </li>\n<li>@RequiredArgsConstructor<br>: final로 선언된 필드가 포함된 생성자를 생성해줍니다.</li>\n</ul></blockquote>\n<p>import의 경로를 보면 이 2개의 어노테이션은 Lombok 어노테이션이라는 것을 알 수 있습니다.<br>롬복의 어노테이션은 이와같이 코드를 굳이 적지 않아도 내부적으로 생성해주어 코드의 길이를 줄일 수 있습니다.</p>\n<h4 id=\"5-3-HelloResponseDto의-테스트-코드-작성\"><a href=\"#5-3-HelloResponseDto의-테스트-코드-작성\" class=\"headerlink\" title=\"5-3 HelloResponseDto의 테스트 코드 작성\"></a>5-3 HelloResponseDto의 테스트 코드 작성</h4><p>HelloResponseDto 클래스의 코드 작성이 완료되었습니다.<br>이제 이 코드를 테스트할 테스트 클래스를 생성하고, 아래의 코드를 작성해주세요.</p>\n<pre><code class=\"java\">class HelloResponseDtoTest &#123;\n    @Test\n    public void 롬복_기능_테스트()&#123;\n        // given\n        String name = &quot;test&quot;;\n        int amount = 1000;\n\n        // when\n        HelloResponseDto dto = new HelloResponseDto(name, amount);\n\n        // then\n        assertThat(dto.getName()).isEqualTo(name);\n        assertThat(dto.getAmount()).isEqualTo(amount);\n    &#125;\n&#125;\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>@Test<br>: 테스트를 수행하는 메소드를 선언  </li>\n<li>AssertThat()<br>: 테스트 검증 라이브러리인 assertj의 검증 메소드  </li>\n<li>isEqualTo()<br>: assertThat()에 이어사용하는 메소드로 assertj의 동등 비교 메소드</li>\n</ul></blockquote>\n<p>테스트 코드의 작성이 완료되었습니다! 그럼, 테스트를 실행해봅시다.</p>\n<h4 id=\"5-4-error-variable-name-not-initialized-in-the-default-constructor-메시지의-해결\"><a href=\"#5-4-error-variable-name-not-initialized-in-the-default-constructor-메시지의-해결\" class=\"headerlink\" title=\"5-4 error: variable name not initialized in the default constructor 메시지의 해결\"></a>5-4 error: variable name not initialized in the default constructor 메시지의 해결</h4><p>테스트 코드를 실행하면, <code>error: variable name not initialized in the default constructor</code>라는 에러 메시지가 표시됩니다.<br>번역하자면 디폴트 생성자에서 변수의 이름이 초기화되지 않았다는 의미입니다. 이 메시지는 뭘까요?<br>이 에러 메시지는 <strong>롬복이 제대로 주입(DI)되지 않았을 때에 발생하는 에러</strong>입니다.<br>그렇다면 이전에 추가해주었던 의존성이 잘못된 걸까요?<br>정답부터 말하자면, 단순히 <strong>gradle의 버전과 관련된 문제</strong>입니다.<br>gradle5 버전부터는 어노테이션을 구별해서 추가해주지 않으면 제대로 주입되지 않습니다.<br>때문에 Lombok Gradle plugin을 추가하거나, annotationProcessor에 Lombok을 추가하여 컴파일 범위를 지정해주어야 합니다.<br><a href=\"https://projectlombok.org/setup/gradle\">(출처 : Project Lombok)</a></p>\n<pre><code class=\"gradle\">// Lombok Gradle plugin을 추가하는 방법\nplugins &#123;\n  id &quot;io.freefair.lombok&quot; version &quot;6.0.0-m2&quot;\n&#125;\n</code></pre>\n<pre><code class=\"gradle\">// annotationProcessor를 추가하는 방법\ndependencies &#123;\n    compileOnly &#39;org.projectlombok:lombok:1.18.20&#39;\n    annotationProcessor &#39;org.projectlombok:lombok:1.18.20&#39;\n&#125;\n</code></pre>\n<p>여기서는 Lombok Gradle plugin을 추가하는 방법을 사용하여 에러 메시지를 해결하도록 하겠습니다.<br>그럼, build.gradle의 plugins { } 안에 위의 코드를 추가하고, gradle을 reload 해주세요.</p>\n<p>[그림5-2] Lombok Gradle plugin 추가<br><img src=\"./springboot-web-6/2-add_gradle_plugin.png\" alt=\"Lombok Gradle plugin\"></p>\n<p>이제 다시 테스트를 실행하면, 에러 메시지가 없어지고 tests passed가 되는 것을 볼 수 있습니다.<br>이렇게 되면 롬복의 @Getter 어노테이션으로 get메서드가, @RequiredArgsConstructor로 생성자가 자동으로 생성된 것입니다.</p>\n<p>그럼 HelloController에도 새로만든 ResponseDto를 사용하도록 코드를 추가해봅시다!</p>\n<h4 id=\"5-5-HelloController가-ResponseDto를-사용하도록-수정\"><a href=\"#5-5-HelloController가-ResponseDto를-사용하도록-수정\" class=\"headerlink\" title=\"5-5 HelloController가 ResponseDto를 사용하도록 수정\"></a>5-5 HelloController가 ResponseDto를 사용하도록 수정</h4><p>HelloController클래스의 hello 메서드를 아래의 코드처럼 변경합니다.</p>\n<pre><code class=\"java\">@GetMapping(&quot;/hello/dto&quot;)\npublic HelloResponseDto helloDto(@RequestParam(&quot;name&quot;) String name,\n                                 @RequestParam(&quot;amount&quot;) int amount)&#123;\n   return new HelloResponseDto(name, amount);\n&#125;\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>@RequestParam(“paramName”)<br>: 외부에서 API로 넘긴 파라미터를 가져오는 어노테이션<br>→ 위의 코드에서는 외부에서 name으로 넘긴 파라미터를 String name 변수에 저장해 사용</li>\n</ul></blockquote>\n<p>이제, 변경한 코드가 제대로 동작하는지 확인하기 위해 HelloControllerTest에 테스트 코드를 추가하겠습니다.</p>\n<h4 id=\"5-6-HelloControllerTest에-테스트-코드-추가\"><a href=\"#5-6-HelloControllerTest에-테스트-코드-추가\" class=\"headerlink\" title=\"5-6 HelloControllerTest에 테스트 코드 추가\"></a>5-6 HelloControllerTest에 테스트 코드 추가</h4><p>아래의 임포트를 추가해주세요. 이 임포트는 is 메서드를 사용하기 위해 추가합니다.<br><code>is()</code>는 내부적으로 <code>equalTo()</code>와 같은 것으로 가독성을 증진시키기 위해 사용하는 메서드입니다.</p>\n<pre><code class=\"java\">import static org.hamcrest.Matchers.is;\n</code></pre>\n<p>아래의 테스트 메서드를 추가해주세요.</p>\n<pre><code class=\"java\">@Test\npublic void helloDto가_리턴된다() throws  Exception &#123;\n    String name = &quot;hello&quot;;\n    int amount = 1000;\n\n    mvc.perform(get(&quot;/hello/dto&quot;)\n                .param(&quot;name&quot;, name)\n                .param(&quot;amount&quot;, String.valueOf(amount))\n    )\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(&quot;$.name&quot;, is(name)))\n            .andExpect(jsonPath(&quot;$.amount&quot;, is(amount)));\n&#125;\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>param()<br>: API 테스트할 떄 사용될 요청 파라미터를 설정합니다. 단, 값은 String만 허용됩니다.</li>\n<li>jsonPath()<br>: JSON 응답값을 필드별로 검증할 수 있는 메소드입니다. $를 기준으로 필드명을 명시합니다.</li>\n</ul></blockquote>\n<p>이제 추가된 API의 테스트를 실행해봅시다.</p>\n<p>[그림5-3] helloDto 테스트 메서드 추가<br><img src=\"./springboot-web-6/3-add_test_code.png\" alt=\"add helloDtoTest\"></p>\n<p>테스트가 문제없이 통과되는 것을 확인하실 수 있습니다.</p>\n<hr>\n<p>기존 코드를 롬복을 사용해 리팩토링 해보았습니다. DTO의 코드가 짧은걸 느낄 수 있으신가요?<br>원래라면 DTO에 Getter, Constructor, toString 같은 요소를 전부 적어주어야 합니다.<br>하지만, 롬복을 통해 <strong>어노테이션 두 개와 속성 두 개로 DTO의 코드가 해결</strong>되었습니다.<br>앞으로의 코드는 이 유용한 라이브러리인 롬복을 이용해서 코드를 작성하도록 하겠습니다.</p>\n","feature":true,"text":"이 포스트에서는 여태까지 작성한 코드를 롬복으로 리팩토링해보겠습니다. 롬복(Lombok)으로 기존 코드 리팩토링5-1 HelloResponseDto 클래스 추가HelloResponseDto 클래스를 추가합니다.위치는 web 패키지 &gt; dto 패키...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":7,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":7,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"Lombok","slug":"Lombok","count":2,"path":"api/tags/Lombok.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EB%A1%AC%EB%B3%B5-Lombok-%EC%9C%BC%EB%A1%9C-%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\"><span class=\"toc-text\">롬복(Lombok)으로 기존 코드 리팩토링</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-HelloResponseDto-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">5-1 HelloResponseDto 클래스 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-HelloResponseDto-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\"><span class=\"toc-text\">5-2 HelloResponseDto 코드 작성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-HelloResponseDto%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\"><span class=\"toc-text\">5-3 HelloResponseDto의 테스트 코드 작성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-error-variable-name-not-initialized-in-the-default-constructor-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%ED%95%B4%EA%B2%B0\"><span class=\"toc-text\">5-4 error: variable name not initialized in the default constructor 메시지의 해결</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-5-HelloController%EA%B0%80-ResponseDto%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8F%84%EB%A1%9D-%EC%88%98%EC%A0%95\"><span class=\"toc-text\">5-5 HelloController가 ResponseDto를 사용하도록 수정</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-HelloControllerTest%EC%97%90-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">5-6 HelloControllerTest에 테스트 코드 추가</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{"title":"3. 구현(Implementation)","uid":"de3f69ccc161905f5bded0c2342c2211","slug":"algorithm-implementation","date":"2021-06-17T06:09:51.000Z","updated":"2021-06-17T06:30:26.087Z","comments":true,"path":"api/articles/algorithm-implementation.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/algorithm.jpeg","text":"친구들과 알고리즘 공부를 하면서 “이해는 했는데 코드로 짜기가 힘들다”라는 말을 하곤 했습니다.그때는 알고리즘은 원리만 알면 풀 수 있는거 아니야? 하는 생각도 있었는데, 지금 생각해보니 정말 얼토당토않은 말이었죠.알고리즘이 중요하게 다뤄지는 이유는 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"알고리즘 & 코딩 테스트","slug":"알고리즘-코딩-테스트","count":3,"path":"api/categories/알고리즘-코딩-테스트.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":3,"path":"api/tags/algorithm.json"},{"name":"Implementation","slug":"Implementation","count":1,"path":"api/tags/Implementation.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true},"next_post":{"title":"4. 프로젝트 설정 확인과 롬복(Lombok)","uid":"4f4324f9c57576ee9b59f6532264f460","slug":"springboot-web-5","date":"2021-06-14T03:18:58.000Z","updated":"2021-06-16T14:02:36.053Z","comments":true,"path":"api/articles/springboot-web-5.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"이 포스트에서는 롬복을 소개하고 프로젝트에 롬복을 추가하여 사용해보도록 하겠습니다. 롬복(Lombok)자바 개발자들의 필수 라이브러리 롬복(Lombok)은 어노테이션 기반으로 코드를 자동완성 해주는 라이브러리입니다.롬복을 이용하면 생성자 및 Gette...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":7,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":7,"path":"api/tags/springBoot.json"},{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"Lombok","slug":"Lombok","count":2,"path":"api/tags/Lombok.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}