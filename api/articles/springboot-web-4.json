{"title":"3. 프로젝트 설정 확인","uid":"1bc1fccedcb28371ce507abc90a2b06f","slug":"springboot-web-4","date":"2021-06-11T02:24:43.000Z","updated":"2021-06-11T04:00:37.410Z","comments":true,"path":"api/articles/springboot-web-4.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<p>이 포스트에서는 이전까지 작성한 프로젝트가 제대로 동작하는지 테스트하도록 하겠습니다.<br>테스트코드를 작성하기 전에 기능테스트를 위한 간단한 API를 작성해보겠습니다.</p>\n<h3 id=\"“hello”를-반환하는-GET-method-API-만들기\"><a href=\"#“hello”를-반환하는-GET-method-API-만들기\" class=\"headerlink\" title=\"“hello”를 반환하는 GET method API 만들기\"></a>“hello”를 반환하는 GET method API 만들기</h3><h4 id=\"3-1-패키지-생성\"><a href=\"#3-1-패키지-생성\" class=\"headerlink\" title=\"3-1 패키지 생성\"></a>3-1 패키지 생성</h4><p>프로젝트에서 경로 <code>src &gt; main &gt; java 디렉토리</code> 에 패키지를 생성합니다.<br>일반적으로 패키지명은 웹 사이트 주소의 역순으로 작성합니다. 저는 com.dev.latte.springboot로 작성했습니다.</p>\n<p>[그림3-1] 패키지 생성<br><img src=\"./springboot-web-4/1-create_package.png\" alt=\"create package\"></p>\n<h4 id=\"3-2-Application-클래스-생성\"><a href=\"#3-2-Application-클래스-생성\" class=\"headerlink\" title=\"3-2 Application 클래스 생성\"></a>3-2 Application 클래스 생성</h4><p>방금 작성한 패키지에 Application이라는 이름으로 자바 클래스파일을 추가해줍니다.<br>여기서 주의할 것은 경로가 다르면 안된다는 것과 클래스의 맨 첫글자가 대문자라는 것입니다.<br>이는 자바의 명명규칙으로 자바의 클래스 이름의 첫 글자는 항상 대문자로 작성되어야 합니다.<br>자바 명명규약(Naming Rule)은 기회가 된다면 다루어보도록 하겠습니다.</p>\n<p>[그림3-2] Application 클래스 생성<br><img src=\"./springboot-web-4/2-create_class.png\" alt=\"create class\"></p>\n<h4 id=\"3-3-클래스-내용-작성\"><a href=\"#3-3-클래스-내용-작성\" class=\"headerlink\" title=\"3-3 클래스 내용 작성\"></a>3-3 클래스 내용 작성</h4><p>Application 클래스에 아래의 코드를 작성합니다.<br>지금 작성하는 <code>Application.class</code>는 프로젝트의 <strong>메인클래스</strong>가 됩니다!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">import가 자동으로 추가되지 않는다면?</p>\n<p>    import가 자동으로 추가되지 않는다면, 추가되지 않아 붉게 변한 코드로 이동한 후 윈도우는 <code>[alt + enter]</code>, 맥은 <code>[option + enter]</code>를 눌러 직접 import해주세요.</p>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>@SpringBootApplication<br>: 스프링 부트의 자동 설정, 스프링 bean읽기와 생성을 모두 자동으로 설정하기 위한 어노테이션입니다. 프로젝트는 이 어노테이션이 있는 지점부터 설정을 읽어가기 때문에 @SpringBootApplication이 붙어있는 클래스는 <strong>항상 프로젝트 최상단에 위치</strong>해야합니다.</li>\n<li>SpringApplication.run 메서드<br>: 이 메서드는 내부 WAS를 실행합니다. 때문에 톰캣이 필요 없다는 장점이 있으며 스프링 부트에서도 내장 WAS를 사용하는 것을 권장하고 있습니다.</li>\n</ul></blockquote>\n<h4 id=\"3-4-테스트를-위한-Controller의-패키지-생성\"><a href=\"#3-4-테스트를-위한-Controller의-패키지-생성\" class=\"headerlink\" title=\"3-4 테스트를 위한 Controller의 패키지 생성\"></a>3-4 테스트를 위한 Controller의 패키지 생성</h4><p>현재 패키지(com.dev.latte.springboot)의 하위에 <code>web</code> 패키지를 만들어보겠습니다.<br><em>앞으로 컨트롤러와 관련된 클래스들은 모두 이 패키지에 담겠습니다.</em></p>\n<h4 id=\"3-5-Controller-생성-및-코드-작성\"><a href=\"#3-5-Controller-생성-및-코드-작성\" class=\"headerlink\" title=\"3-5 Controller 생성 및 코드 작성\"></a>3-5 Controller 생성 및 코드 작성</h4><p>web 패키지 아래에 테스트를 시행할 컨트롤러를 만들어 보겠습니다.<br>클래스이름은 <code>HelloController</code>이며 내부 코드는 다음과 같습니다.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>@RestController<br>: 컨트롤러를 JSON객체를 반환하는 컨트롤러로 만들어줍니다.  </li>\n<li>@GetMapping<br>: GET요청을 받는 API를 만들어줍니다.</li>\n</ul></blockquote>\n<h3 id=\"기능-테스트\"><a href=\"#기능-테스트\" class=\"headerlink\" title=\"기능 테스트\"></a>기능 테스트</h3><h4 id=\"3-6-Controller의-기능-테스트를-위한-클래스-생성\"><a href=\"#3-6-Controller의-기능-테스트를-위한-클래스-생성\" class=\"headerlink\" title=\"3-6 Controller의 기능 테스트를 위한 클래스 생성\"></a>3-6 Controller의 기능 테스트를 위한 클래스 생성</h4><p>작성한 코드가 제대로 작동하는지 테스트하겠습니다.<br>방금 생성한 HelloController의 클래스 이름 위에 커서를 두고, 윈도우는 <code>[alt + enter]</code>, 맥은 <code>[option + enter]</code>를 누른 후, create test를 선택하여 그대로 테스트 클래스를 생성해주세요.</p>\n<p>[그림3-3] 테스트 클래스 생성<br><img src=\"./springboot-web-4/3-create_test_class.png\" alt=\"create test class\"></p>\n<p>생성된 테스트 클래스의 내부 코드를 아래와 같이 작성해주세요.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcRequestBuilders</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span>controllers <span class=\"token operator\">=</span> <span class=\"token class-name\">HelloController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloControllerTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> hello가_리턴된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        mvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>@WebMvcTest<br>: MVC Controoler를 위한 테스트로 동작이 예상한대로 동작하는지 확인하는 데에 사용한다.</li>\n<li>@Autowired<br>: 해당 변수 및 메서드에 스프링이 관리하는 Bean을 자동으로 매핑해준다. (스프링 의존성 주입)</li>\n<li>@Test<br>: 테스트를 수행하는 메소드를 선언한다.</li>\n</ul></blockquote>\n<p>책에서는 <code>@WebMvcTest()</code> 어노테이션 위에 <code>@RunWith(SpringRunner.class)</code> 어노테이션이 작성되어 있지만, 이 코드에서는 적지 않습니다.<br>그 이유는 JUnit의 버전이 책과 다르기 때문입니다. [그림3-3]을 보면 이 테스트 클래스는 JUnit5버전입니다. <code>@RunWith()</code> 어노테이션은 JUnit4버전에 존재하는 어노테이션으로 JUnit5버전으로 올라오면서 <code>@ExtendWith()</code>로 대체되었습니다. 때문에 <code>@RunWith()</code> 대신에 <code>@ExtendWith()</code>을 사용해야 합니다.<br><a href=\"https://junit.org/junit5/docs/current/user-guide/\">(출처 : @RunWith no longer exists; superseded by @ExtendWith)</a>  </p>\n<p>하지만 이미 스프링 부트가 제공하는 모든 테스트용 어노테이션에는 <code>@ExtendWith()</code>가 메타 어노테이션으로 적용되어 있기 때문에 <strong>@ExtendWith(SpringExtension.class)를 생략</strong>할 수 있습니다.<br><a href=\"https://stackoverflow.com/questions/61433806/junit-5-with-spring-boot-when-to-use-extendwith-spring-or-mockito\">(출처 : Junit 5 with Spring Boot: When to use @ExtendWith Spring or Mockito?)</a></p>\n<h4 id=\"3-7-테스트-코드-실행\"><a href=\"#3-7-테스트-코드-실행\" class=\"headerlink\" title=\"3-7 테스트 코드 실행\"></a>3-7 테스트 코드 실행</h4><p>그럼 작성한 메소드를 테스트해봅시다. 왼쪽에 있는 초록색 삼각형을 눌러서 테스트를 실행해주세요!</p>\n<p>[그림3-4] 테스트 코드 실행<br><img src=\"./springboot-web-4/4-test.png\" alt=\"test\"></p>\n<p>테스트가 실행되고, 코드에 문제가 없다면 아래와 같이 Tests passed가 표시됩니다.  </p>\n<p>[그림3-5] 테스트 결과화면<br><img src=\"./springboot-web-4/5-test_result.png\" alt=\"test result\"></p>\n<h4 id=\"3-8-프로젝트-동작-확인\"><a href=\"#3-8-프로젝트-동작-확인\" class=\"headerlink\" title=\"3-8 프로젝트 동작 확인\"></a>3-8 프로젝트 동작 확인</h4><p>마지막으로 프로젝트가 실제로 잘 동작하는지 확인해보겠습니다.<br>Application.class로 돌아가 메인 메소드를 실행(Run ‘Application’)해주세요.</p>\n<p>[그림3-6] 어플리케이션 실행<br><img src=\"./springboot-web-4/6-run_application.png\" alt=\"run application\"></p>\n<p>프로젝트가 문제없이 실행되었다면 콘솔 탭에 아래와 같이 표시됩니다.</p>\n<p>[그림3-6] 어플리케이션 실행<br><img src=\"./springboot-web-4/7-success_run_application.png\" alt=\"result run application\"></p>\n<p>브라우저에서 <code>localhost:8080/hello</code>로 접속해주세요.<br>접속했을 때, 다음과 같이 문자열 hello가 잘 노출된다면 프로젝트가 제대로 동작하고 있는겁니다!</p>\n<p>[그림3-7] API 실행 결과<br><img src=\"./springboot-web-4/8-result_API.png\" alt=\"result API\"></p>\n<hr>\n<p>이제, 웹 서비스를 위한 가장 기초적인 설정을 끝냈습니다.  </p>\n<ul>\n<li>스프링 부트 프로젝트 설정  </li>\n<li>API 코드 작성 및 테스트방법  </li>\n</ul>\n<p>다음 포스트에서는 생산성을 높여주는 라이브러리 롬복에 대해 설명하겠습니다.</p>\n","feature":true,"text":"이 포스트에서는 이전까지 작성한 프로젝트가 제대로 동작하는지 테스트하도록 하겠습니다.테스트코드를 작성하기 전에 기능테스트를 위한 간단한 API를 작성해보겠습니다. “hello”를 반환하는 GET method API 만들기3-1 패키지 생성프로젝트에서 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":4,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":4,"path":"api/tags/springBoot.json"},{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"},{"name":"TDD","slug":"TDD","count":1,"path":"api/tags/TDD.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%80%9Chello%E2%80%9D%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-GET-method-API-%EB%A7%8C%EB%93%A4%EA%B8%B0\"><span class=\"toc-text\">“hello”를 반환하는 GET method API 만들기</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%83%9D%EC%84%B1\"><span class=\"toc-text\">3-1 패키지 생성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-Application-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\"><span class=\"toc-text\">3-2 Application 클래스 생성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%82%B4%EC%9A%A9-%EC%9E%91%EC%84%B1\"><span class=\"toc-text\">3-3 클래스 내용 작성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-Controller%EC%9D%98-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%83%9D%EC%84%B1\"><span class=\"toc-text\">3-4 테스트를 위한 Controller의 패키지 생성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-Controller-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\"><span class=\"toc-text\">3-5 Controller 생성 및 코드 작성</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EA%B8%B0%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8\"><span class=\"toc-text\">기능 테스트</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-Controller%EC%9D%98-%EA%B8%B0%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\"><span class=\"toc-text\">3-6 Controller의 기능 테스트를 위한 클래스 생성</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89\"><span class=\"toc-text\">3-7 테스트 코드 실행</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\"><span class=\"toc-text\">3-8 프로젝트 동작 확인</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{"title":"1. 알고리즘의 복잡도","uid":"d6a03e07ef9853873ef42e3c7ea6ee4a","slug":"algorithm-complexity","date":"2021-06-12T12:42:51.000Z","updated":"2021-06-12T15:14:41.339Z","comments":true,"path":"api/articles/algorithm-complexity.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/algorithm.jpeg","text":"프로그래밍 공부를 하는 사람이라면 “복잡도(Complexity)”라는 단어를 한 번 쯤은 들어봤을겁니다.그런데 이게 대~충은 알 것 같은데 막상 누군가에게 복잡도에 대해서 설명하려고 하면 설명하기 어려운 경우가 많습니다.때문에 이 포스트에서는 알고리즘...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"알고리즘 & 코딩 테스트","slug":"알고리즘-코딩-테스트","count":2,"path":"api/categories/알고리즘-코딩-테스트.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":2,"path":"api/tags/algorithm.json"},{"name":"complexity","slug":"complexity","count":1,"path":"api/tags/complexity.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true},"next_post":{"title":"2. Gradle을 스프링 부트 프로젝트로 변경","uid":"18c39e99fd033dd5083bccdf6728bd02","slug":"springboot-web-3","date":"2021-06-10T00:46:49.000Z","updated":"2021-06-12T14:56:55.283Z","comments":true,"path":"api/articles/springboot-web-3.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"이번 포스트에서는 작성한 프로젝트를 스프링 부트 프로젝트로 변경하는 방법을 설명합니다.의존성 주입을 통해 gradle을 스프링 부트 프로젝트로 변경하도록 하겠습니다. Gradle을 스프링 부트 프로젝트로 변경2-1 “build.gradle”의 프로젝트...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":4,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":4,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"},{"name":"gradle","slug":"gradle","count":3,"path":"api/tags/gradle.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}