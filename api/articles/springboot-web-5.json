{"title":"4. 프로젝트 설정 확인과 롬복(Lombok)","uid":"4f4324f9c57576ee9b59f6532264f460","slug":"springboot-web-5","date":"2021-06-14T03:18:58.000Z","updated":"2021-06-16T14:02:36.053Z","comments":true,"path":"api/articles/springboot-web-5.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","content":"<p>이 포스트에서는 롬복을 소개하고 프로젝트에 롬복을 추가하여 사용해보도록 하겠습니다.</p>\n<h3 id=\"롬복-Lombok\"><a href=\"#롬복-Lombok\" class=\"headerlink\" title=\"롬복(Lombok)\"></a>롬복(Lombok)</h3><p>자바 개발자들의 필수 라이브러리 롬복(Lombok)은 <strong>어노테이션 기반으로 코드를 자동완성 해주는 라이브러리</strong>입니다.<br>롬복을 이용하면 생성자 및 Getter와 Setter 등의 코드를 자동완성 시킬 수 있습니다.<br>이런 자동완성을 통해 사용자는 클래스 내에 직접 코드를 작성하지 않아도 해당 메소드를 사용할 수 있게 됩니다.<br>때문에 <strong>코드가 단순해지고 가독성이 좋아지는데</strong> 이러한 단순화를 코드 다이어트라고 부르기도 합니다.</p>\n<p>그럼, 프로젝트에 롬복을 추가하고 롬복을 기반으로 리팩토링하여 롬복의 코드 자동완성이 어떤 의미인지 살펴보도록 합시다.<br><em>(리팩토링은 다음 포스트에서 진행됩니다.)</em></p>\n<h4 id=\"4-1-롬복-추가\"><a href=\"#4-1-롬복-추가\" class=\"headerlink\" title=\"4-1 롬복 추가\"></a>4-1 롬복 추가</h4><p>그럼 프로젝트에 롬복을 추가해봅시다.<br>추가 방법은 build.gradle의 dependencies에 다음의 코드를 추가하는 것입니다.</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">dependencies &#123;\n    compileOnly group: &#39;org.projectlombok&#39;, name: &#39;lombok&#39;, version: &#39;1.18.20&#39;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>[그림4-1] Lombok 의존성 추가<br><img src=\"./springboot-web-5/1-lombok.png\" alt=\"Lombok 의존성 추가\"></p>\n<p>build.gradle에 롬복 의존성을 추가하였으니, gradle을 빌드하여 롬복을 프로젝트에 내려받도록 합니다!</p>\n<h4 id=\"4-2-롬복-플러그인-추가\"><a href=\"#4-2-롬복-플러그인-추가\" class=\"headerlink\" title=\"4-2 롬복 플러그인 추가\"></a>4-2 롬복 플러그인 추가</h4><p>gradle을 통해 롬복 라이브러리의 임포트가 완료되었다면, 이번엔 롬복 플러그인을 설치합니다.<br>인텔리제이에서 플러그인 설치는 plugins에서 가능하며 윈도우는 <code>[Ctrl + Shift + A]</code>, 맥은 <code>[Command + Shift + A]</code> 를 누른 후, plugins를 검색하여 이동이 가능합니다.  </p>\n<p>[그림4-2] intellij plugins로 이동<br><img src=\"./springboot-web-5/2-move_plugins.png\" alt=\"intellij plugins로 이동\"></p>\n<p>Plugins의 MarketPlace 탭으로 이동하여 Lombok을 검색하고 설치한 후 인텔리제이를 <strong>재시동</strong>해줍니다.</p>\n<p>[그림4-3] Lombok plugin 설치<br><img src=\"./springboot-web-5/3-install_lombok_plugin.png\" alt=\"Lombok plugin 설치\"></p>\n<p><em>(저는 이미 플러그인을 설치한 상태라 installed에 표시됩니다. 처음 설치하시는 분은 Marketplace에 표시될겁니다.)</em></p>\n<h4 id=\"4-3-Lombok-Annotation-Processing-셋팅\"><a href=\"#4-3-Lombok-Annotation-Processing-셋팅\" class=\"headerlink\" title=\"4-3 Lombok Annotation Processing 셋팅\"></a>4-3 Lombok Annotation Processing 셋팅</h4><p>이번에는 Lombok Annotation Processing을 설정하도록 하겠습니다.<br>롬복을 추가하고, 플러그인까지 설치했는데 빌드를 하면<br><code>You aren&#39;t using a compiler supported by lombok, so lombok will not work and has been disabled.</code><br>라는 에러 메시지가 뜨면서 빌드에 실패하게 될겁니다.<br>이런 문제를 해결하기 위해서는 annotation processing을 체크하여 인텔리제이가 롬복을 사용할 수 있게 설정해주어야 합니다.</p>\n<p>먼저, 인텔리 제이의 Preferences로 이동하여 Annotation Processor를 검색하여 해당 메뉴로 이동합니다.<br>해당 메뉴에서 “Enable annotation processing”을 체크하면 설정 완료 입니다.</p>\n<p>[그림4-4] Lombok Annotation Processing 설정<br><img src=\"./springboot-web-5/4-annotation_processing.png\" alt=\"Lombok Annotation Processing 설정\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>롬복의 플러그인 설치는 한 번이면 끝나지만, Enable Annotation Processing은 프로젝트마다 설정해주어야 합니다.<br>새로운 프로젝트를 만들게된다면 잊지말고 설정해주세요!</p>\n</div>\n<hr>\n<p>이제, 롬복의 셋팅이 완료되었습니다!<br>다음 포스트에서는 기존 코드를 롬복을 이용해 리팩토링 하는 시간을 갖겠습니다.</p>\n","feature":true,"text":"이 포스트에서는 롬복을 소개하고 프로젝트에 롬복을 추가하여 사용해보도록 하겠습니다. 롬복(Lombok)자바 개발자들의 필수 라이브러리 롬복(Lombok)은 어노테이션 기반으로 코드를 자동완성 해주는 라이브러리입니다.롬복을 이용하면 생성자 및 Gette...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":6,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":6,"path":"api/tags/springBoot.json"},{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"Lombok","slug":"Lombok","count":2,"path":"api/tags/Lombok.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EB%A1%AC%EB%B3%B5-Lombok\"><span class=\"toc-text\">롬복(Lombok)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%EB%A1%AC%EB%B3%B5-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">4-1 롬복 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%EB%A1%AC%EB%B3%B5-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80\"><span class=\"toc-text\">4-2 롬복 플러그인 추가</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-Lombok-Annotation-Processing-%EC%85%8B%ED%8C%85\"><span class=\"toc-text\">4-3 Lombok Annotation Processing 셋팅</span></a></li></ol></li></ol>","author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"mapped":true,"prev_post":{"title":"5. 롬복(Lombok)으로 기존 코드 리팩토링","uid":"08591114c8a1ce3933292eb92a5512bc","slug":"springboot-web-6","date":"2021-06-16T14:03:34.000Z","updated":"2021-06-16T15:51:36.857Z","comments":true,"path":"api/articles/springboot-web-6.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/main.png","text":"이 포스트에서는 여태까지 작성한 코드를 롬복으로 리팩토링해보겠습니다. 롬복(Lombok)으로 기존 코드 리팩토링5-1 HelloResponseDto 클래스 추가HelloResponseDto 클래스를 추가합니다.위치는 web 패키지 &gt; dto 패키...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","count":6,"path":"api/categories/스프링-부트와-AWS로-혼자-구현하는-웹-서비스.json"}],"tags":[{"name":"springBoot","slug":"springBoot","count":6,"path":"api/tags/springBoot.json"},{"name":"Java","slug":"Java","count":4,"path":"api/tags/Java.json"},{"name":"Lombok","slug":"Lombok","count":2,"path":"api/tags/Lombok.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true},"next_post":{"title":"2. 탐욕 알고리즘(Greedy Algorithm)","uid":"4db30505bd3613ad654d9a53e43df5c4","slug":"algorithm-greedy","date":"2021-06-13T01:27:11.000Z","updated":"2021-06-14T04:27:10.318Z","comments":true,"path":"api/articles/algorithm-greedy.json","keywords":"Programming, JAVA, JS, Spring MVC/Boot, React","cover":"../images/algorithm.jpeg","text":"이번 포스트에서는 탐욕 알고리즘(Greedy Algorithm)에 대해서 정리하겠습니다.사실 코딩 테스트에서 탐욕 알고리즘은 출제 빈도가 낮은 편에 속합니다.(프로그래머스 기준)그럼에도 탐욕 알고리즘을 정리하는 이유는 이를 공부하다보면 알고리즘 문제의...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"알고리즘 & 코딩 테스트","slug":"알고리즘-코딩-테스트","count":2,"path":"api/categories/알고리즘-코딩-테스트.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":2,"path":"api/tags/algorithm.json"},{"name":"Greedy","slug":"Greedy","count":1,"path":"api/tags/Greedy.json"}],"author":{"name":"Latte","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"최근에는 바닐라 라떼가 가장 좋습니다.","socials":{"github":"https://github.com/dev-latte","twitter":"https://twitter.com/dev_latte","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"mail":{"icon":"fas fa-envelope","link":null}}}},"feature":true}}